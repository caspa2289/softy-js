{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,W,O,C,E,I,S,C,E,O,E,C,E,W,C,E,a,C,C,GCEA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,GCVA,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,sGGArF,OAAM,EAMT,YAAY,CAAS,CAAE,CAAS,CAAE,CAAS,CAAE,EAAI,CAAC,CAAE,CAChD,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,CAAC,CAAG,CACb,CAEA,IAAI,CAAkB,CAAY,CAC9B,OAAO,IAAI,EACP,IAAI,CAAC,CAAC,CAAG,EAAS,CAAC,CACnB,IAAI,CAAC,CAAC,CAAG,EAAS,CAAC,CACnB,IAAI,CAAC,CAAC,CAAG,EAAS,CAAC,CACnB,IAAI,CAAC,CAAC,CAEd,CAEA,SAAS,CAAkB,CAAY,CACnC,OAAO,IAAI,EACP,IAAI,CAAC,CAAC,CAAG,EAAS,CAAC,CACnB,IAAI,CAAC,CAAC,CAAG,EAAS,CAAC,CACnB,IAAI,CAAC,CAAC,CAAG,EAAS,CAAC,CACnB,IAAI,CAAC,CAAC,CAEd,CACJ,CE9BO,MAAM,EAKT,YAAY,CAAS,CAAE,CAAS,CAAE,EAAY,CAAC,CAAE,CAC7C,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,CAAC,CAAG,CACb,CACJ,CDLA,MAAM,EAAsB,CACxB,IAAI,EAAS,EAAG,GAChB,IAAI,EAAS,EAAG,GAChB,IAAI,EAAS,EAAG,GACnB,AAEM,OAAM,EAKT,YAAY,CAAA,SACR,CAAQ,CAAA,cACR,EAAgB,CAAA,CAAA,OAChB,CAAM,CACgE,CAAE,CACxE,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,cAAc,CAAG,EACtB,IAAI,CAAC,MAAM,CAAG,CAClB,CAEA,eAAe,CAAc,CAAc,CAKvC,OAJA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,GAC5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,GAC5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,GAErD,IAAI,AACf,CAEA,0BAA0B,CAAmB,CAAE,CAAoB,CAAc,CA6B7E,OA5BA,yBAAyB;AACzB,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CACtE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CACtE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,EAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAEhD,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CACtE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CACtE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,EAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAEhD,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CACtE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CACtE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAG,EAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAEhD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,EAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAClF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,EAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAClF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,EAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAElF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,IAC5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,IAC5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAG,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAE,IAE5D,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,AAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAA,EAAK,GAAM,EACtD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,AAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAA,EAAK,GAAM,EACtD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,AAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAA,EAAK,GAAM,EACtD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,AAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAA,EAAK,GAAM,EACtD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,AAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAA,EAAK,GAAM,EACtD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,AAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAA,EAAK,GAAM,EAE/C,IAAI,CACf,CAEA,iBAAkB,CACd,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,AAAC,GAChB,IAAI,EAAS,EAAO,CAAC,CAAE,EAAO,CAAC,CAAE,EAAO,CAAC,CAAE,EAAO,CAAC,EAElE,CAEA,wBAAyB,CACrB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,AAAC,GACrB,IAAI,EAAS,EAAI,CAAC,CAAE,EAAI,CAAC,CAAE,EAAI,CAAC,EAE/C,CAEA,eAAgB,QACZ,AAAI,IAAI,CAAC,MAAM,CACJ,IAAI,EAAS,IAAI,CAAC,MAAM,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAE9E,KAAA,CAGR,CAEA,SAAU,CACN,OAAO,IAAI,EAAW,CAClB,SAAU,IAAI,CAAC,eAAe,GAC9B,cAAe,IAAI,CAAC,sBAAsB,GAC1C,OAAQ,IAAI,CAAC,aAAa,EAC9B,EACJ,CAEA,IAAI,UAAW,CACX,OAAO,IAAI,CAAC,SAAS,AACzB,CAEA,IAAI,eAAgB,CAChB,OAAO,IAAI,CAAC,cAAc,AAC9B,CAEA,IAAI,SAAS,CAAK,CAAE,CAChB,IAAI,CAAC,SAAS,CAAG,CACrB,CAEA,IAAI,cAAc,CAAiB,CAAE,CACjC,IAAI,CAAC,cAAc,CAAG,CAC1B,CACJ,CFzGO,MAAM,EAAoB,AAAC,GACvB,KAAK,IAAI,CAAC,EAAgB,EAAQ,IAGhC,EAAoB,AAAC,IAC9B,IAAM,EAAS,EAAkB,GAEjC,OAAO,IAAI,EAAS,EAAO,CAAC,CAAG,EAAQ,EAAO,CAAC,CAAG,EAAQ,EAAO,CAAC,CAAG,EACzE,EAEa,EAAkB,CAAC,EAAgB,IACrC,EAAK,CAAC,CAAG,EAAK,CAAC,CAAG,EAAK,CAAC,CAAG,EAAK,CAAC,CAAG,EAAK,CAAC,CAAG,EAAK,CAAC,CAGjD,EAAkB,CAAC,EAAc,IACnC,IAAI,EACP,EAAG,CAAC,CAAG,EAAG,CAAC,CAAG,EAAG,CAAC,CAAG,EAAG,CAAC,CACzB,EAAG,CAAC,CAAG,EAAG,CAAC,CAAG,EAAG,CAAC,CAAG,EAAG,CAAC,CACzB,EAAG,CAAC,CAAG,EAAG,CAAC,CAAG,EAAG,CAAC,CAAG,EAAG,CAAC,EAapB,EAAwB,AAAC,GAC3B,CACH,CAAE,EAAG,EAAG,EAAG,EAAG,CACd,CAAE,EAAG,KAAK,GAAG,CAAC,GAAW,KAAK,GAAG,CAAC,GAAW,EAAG,CAChD,CAAE,EAAG,CAAC,KAAK,GAAG,CAAC,GAAW,KAAK,GAAG,CAAC,GAAW,EAAG,CACjD,CAAE,EAAG,EAAG,EAAG,EAAG,CACjB,CAGQ,EAAwB,AAAC,GAC3B,CACH,CAAE,KAAK,GAAG,CAAC,GAAW,KAAK,GAAG,CAAC,GAAW,EAAG,EAAG,CAChD,CAAE,CAAC,KAAK,GAAG,CAAC,GAAW,KAAK,GAAG,CAAC,GAAW,EAAG,EAAG,CACjD,CAAE,EAAG,EAAG,EAAG,EAAG,CACd,CAAE,EAAG,EAAG,EAAG,EAAG,CACjB,CAGQ,EAAwB,AAAC,GAC3B,CACH,CAAE,KAAK,GAAG,CAAC,GAAW,EAAG,KAAK,GAAG,CAAC,GAAW,EAAG,CAChD,CAAE,EAAG,EAAG,EAAG,EAAG,CACd,CAAE,CAAC,KAAK,GAAG,CAAC,GAAW,EAAG,KAAK,GAAG,CAAC,GAAW,EAAG,CACjD,CAAE,EAAG,EAAG,EAAG,EAAG,CACjB,CAGQ,EAA0B,CAAC,EAAW,EAAW,IACnD,CACH,CAAE,EAAG,EAAG,EAAG,EAAG,CACd,CAAE,EAAG,EAAG,EAAG,EAAG,CACd,CAAE,EAAG,EAAG,EAAG,EAAG,CACd,CAAE,EAAG,EAAG,EAAG,EAAG,CACjB,CAiBQ,EAAoB,CAAC,EAAoB,KAClD,IAAM,EAAkB,EAAsB,EAAS,CAAC,EAClD,EAAkB,EAAsB,EAAS,CAAC,EAClD,EAAkB,EAAsB,EAAS,CAAC,EAClD,EAAoB,EAAwB,EAAS,CAAC,CAAE,EAAS,CAAC,CAAE,EAAS,CAAC,EAEpF,mBAAmB;AACnB,OAAO,EACH,EACI,EACI,EACA,GAEJ,GAEJ,EAER,EAEa,EAAyB,CAAC,EAAiB,KACpD,IAAM,EAAI,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CACrG,EAAI,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CACrG,EAAI,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CACrG,EAAI,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,EAAM,CAAC,CAAG,CAAM,CAAC,EAAE,CAAC,EAAE,CAE3G,OAAO,IAAI,EAAS,EAAG,EAAG,EAAG,EACjC,EAEa,EAAyB,CAAC,EAAY,KAC/C,IAAM,EAAS,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,CAEjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACnB,CAAM,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAI5G,OAAO,CACX,EAEa,EAAoB,CAAC,EAAoB,EAAiB,EAAc,IAC1E,CACH,CAAE,EAAM,CAAC,CAAE,EAAM,CAAC,CAAE,EAAM,CAAC,CAAE,EAAG,CAChC,CAAE,EAAG,CAAC,CAAE,EAAG,CAAC,CAAE,EAAG,CAAC,CAAE,EAAG,CACvB,CAAE,EAAQ,CAAC,CAAG,EAAQ,CAAC,CAAE,EAAQ,CAAC,CAAE,EAAG,CACvC,CAAE,EAAS,CAAC,CAAE,EAAS,CAAC,CAAE,EAAS,CAAC,CAAE,EAAG,CAC5C,CAGQ,EAAoB,AAAC,GAEvB,CACH,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,EAAG,CAChC,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,EAAG,CAChC,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,EAAG,CAChC,CACI,CAAE,CAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,AAAF,EACzD,CAAE,CAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,AAAF,EACzD,CAAE,CAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,AAAF,EACzD,EACH,CACJ,CAGQ,EAAyB,CAAC,EAAa,IACzC,IAAI,EAAS,EAAE,CAAC,CAAG,EAAQ,EAAE,CAAC,CAAG,EAAQ,EAAE,CAAC,CAAG,EAAQ,EAAE,CAAC,EAGxD,EAAiB,CAAC,EAAsB,EAAuB,EAAqB,KAI7F,IAAM,EAAwB,EAAkB,GAC1C,EAAS,CAAC,EAAgB,EAAuB,GACjD,EAAK,EAAgB,EAAW,GAChC,EAAK,EAAgB,EAAS,GAC9B,EAAK,AAAA,CAAA,CAAC,EAAS,CAAA,EAAO,CAAA,EAAK,CAAA,EAC3B,EAAiB,EAAQ,QAAQ,CAAC,GAClC,EAAkB,EAAuB,EAAgB,GAE/D,MAAO,CAAE,OAAQ,EAAU,GAAG,CAAC,GAAkB,EAAA,CAAE,CACvD,EAEa,EAA2B,CAAC,EAAkB,EAAuB,IACvE,EAAY,CAAC,CAAG,EAAO,CAAC,CACzB,EAAY,CAAC,CAAG,EAAO,CAAC,CACxB,EAAY,CAAC,CAAG,EAAO,CAAC,CACxB,EAAgB,EAAa,GAG1B,EAA2B,CAAC,EAAsB,EAAuB,KAClF,IAAM,EAAwB,EAAkB,GAE1C,EAA2B,EAAE,CAC7B,EAA4B,EAAE,CAC9B,EAAkC,EAAE,CACpC,EAAmC,EAAE,CAY3C,OAVA,EAAS,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAQ,KAC3B,EAAyB,EAAQ,EAAuB,IAAe,GACvE,EAAa,IAAI,CAAC,GAClB,EAAoB,IAAI,CAAC,EAAS,aAAa,CAAC,EAAM,IAEtD,EAAc,IAAI,CAAC,GACnB,EAAqB,IAAI,CAAC,EAAS,aAAa,CAAC,EAAM,EAE/D,GAEQ,EAAa,MAAM,EAC3B,0DAA0D;AAC1D,KAAK,EAAG,CACJ,IAAM,EAAQ,EAAe,EAAY,EAAa,CAAY,CAAC,EAAE,CAAE,CAAa,CAAC,EAAE,EACjF,EAAQ,EAAe,EAAY,EAAa,CAAY,CAAC,EAAE,CAAE,CAAa,CAAC,EAAE,EAEjF,EAAc,IAAI,EAAW,CAC/B,SAAU,CACN,CAAY,CAAC,EAAE,CACf,EAAM,MAAM,CACZ,EAAM,MAAM,CACf,CACD,OAAQ,EAAS,MAAM,CACvB,cAAe,CACX,CAAmB,CAAC,EAAE,CACtB,IAAI,EACA,EAAM,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC3F,EAAM,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC3F,EAAM,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,EAE/F,IAAI,EACA,EAAM,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC3F,EAAM,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC3F,EAAM,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,EAElG,AACL,GAEA,MAAO,CAAE,EAAa,AAC1B,CAEA,6EAA6E;AAC7E,KAAK,EAAG,CACJ,IAAM,EAAS,EAAe,EAAY,EAAa,CAAY,CAAC,EAAE,CAAE,CAAa,CAAC,EAAE,EAElF,EAAS,EAAe,EAAY,EAAa,CAAY,CAAC,EAAE,CAAE,CAAa,CAAC,EAAE,EAElF,EAAe,IAAI,EAAW,CAChC,SAAU,CACN,CAAY,CAAC,EAAE,CACf,CAAY,CAAC,EAAE,CACf,EAAO,MAAM,CAChB,CACD,OAAQ,EAAS,MAAM,CACvB,cAAe,CACX,CAAmB,CAAC,EAAE,CACtB,CAAmB,CAAC,EAAE,CACtB,IAAI,EACA,EAAO,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC5F,EAAO,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC5F,EAAO,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,EAEnG,AACL,GAEM,EAAe,IAAI,EAAW,CAChC,SAAU,CACN,CAAY,CAAC,EAAE,CACf,EAAa,QAAQ,CAAC,EAAE,CACxB,EAAO,MAAM,CAChB,CACD,OAAQ,EAAS,MAAM,CACvB,cAAe,CACX,CAAmB,CAAC,EAAE,CACtB,EAAa,aAAa,CAAC,EAAE,CAC7B,IAAI,EACA,EAAO,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC5F,EAAO,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,CAC5F,EAAO,CAAC,CAAI,CAAA,CAAoB,CAAC,EAAE,CAAC,CAAC,CAAG,CAAmB,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,CAAmB,CAAC,EAAE,CAAC,CAAC,EAEnG,AACL,GAEA,MAAO,CAAE,EAAc,EAAc,AACzC,CACA,gCAAgC;AAChC,KAAK,EACD,MAAO,CAAE,EAAU,AAEvB,kCAAiC;AACjC,QACI,MAAO,EAAE,AAEb,CACJ,EAEa,EAAe,CAAC,EAAwB,EAAW,KAC5D,GAAM,CAAA,MAAE,CAAK,CAAA,OAAE,CAAM,CAAE,CAAG,EAGpB,EAAI,KAAK,KAAK,CAAC,EAAI,GACnB,EAAI,KAAK,KAAK,CAAC,EAAI,GAEzB,MAAO,CACH,EAAY,IAAI,CAAC,EAAK,CAAA,AAAoB,EAApB,EAAY,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAM,CACrD,EAAY,IAAI,CAAC,EAAK,CAAA,AAAoB,EAApB,EAAY,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAQ,EAAE,CACzD,EAAY,IAAI,CAAC,EAAK,CAAA,AAAoB,EAApB,EAAY,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAQ,EAAE,CACzD,EAAY,IAAI,CAAC,EAAK,CAAA,AAAoB,EAApB,EAAY,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAQ,EAAE,CAC5D,AAEL,CIzRO,OAAM,EACT,OAAO,UACH,CAAkB,CAClB,CAAwB,CACxB,CAAc,CACd,CAAe,CACf,CAAiC,CACnC,CACE,oBAAoB;AACpB,IAAM,EAAiB,OAAO,MAAM,CAE9B,EAAiB,CACnB,CAAE,MAAO,IAAI,EAAS,EAAG,EAAG,GAAI,OAAQ,IAAI,EAAS,EAAG,EAAG,EAAG,EAC9D,CAAE,MAAO,IAAI,EAAS,EAAG,EAAO,cAAc,CAAG,EAAG,GAAI,OAAQ,IAAI,EAAS,EAAG,GAAI,EAAG,EACvF,CAAE,MAAO,IAAI,EAAS,EAAG,EAAG,GAAI,OAAQ,IAAI,EAAS,EAAG,EAAG,EAAG,EAC9D,CAAE,MAAO,IAAI,EAAS,EAAO,aAAa,CAAG,EAAG,EAAG,GAAI,OAAQ,IAAI,EAAS,GAAI,EAAG,EAAG,EACzF,CAED,EAAK,OAAO,CAAC,AAAC,IACV,IAAM,EAAc,AAAA,EAAkB,EAAW,QAAQ,CAAE,EAAW,QAAQ,EACxE,EAAY,EAAQ,eAAe,CAAC,EAAQ,MAAM,CAAC,KAAK,CAAE,EAAQ,MAAM,CAAC,MAAM,CAErF,CAAA,EAAW,MAAM,EAAE,QAAQ,AAAC,IACxB,IAAM,EAAa,EAAO,UAAU,CAE9B,EAAmB,EAAK,SAAS,CAAC,MAAM,CAAC,CAAC,EAAK,KACjD,IAAM,EAAqB,EAAS,OAAO,GAE3C,EAAmB,cAAc,CAAC,GAElC,IAAM,EAAQ,EAAmB,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAmB,QAAQ,CAAC,EAAE,EAC9E,EAAQ,EAAmB,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAmB,QAAQ,CAAC,EAAE,EAE9E,EAAS,AAAA,EAAkB,AAAA,EAAgB,EAAO,IAElD,EAAmB,AAAA,EACrB,EACA,EAAmB,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAO,QAAQ,GAG3D,GAAI,GAAoB,GAAK,MAAM,GAC/B,OAAO,EAGX,EAAmB,cAAc,CAAC,EAElC,mCAAkC;AAClC,IAAM,EAAmB,AAAA,EACrB,IAAI,EAAS,EAAG,EAAG,EAAO,KAAK,EAC/B,IAAI,EAAS,EAAG,EAAG,GACnB,GACF,GAAG,CAAC,AAAC,IACH,EAAS,MAAM,CAAG,EAEX,EACF,cAAc,CAAC,GACf,yBAAyB,CAAC,EAAQ,IACxC,EAAE,EAEL,MAAO,IAAK,KAAQ,EAAkB,AAC1C,EAAG,EAAE,CACL,gEAAgE;CAC3D,IAAI,CAAC,CAAC,EAAI,KACP,IAAM,EAAa,AAAA,CAAA,EAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,EAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,EAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,AAAD,EAAK,EACvE,EAAa,AAAA,CAAA,EAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,EAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,EAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,AAAD,EAAK,EAE7E,OAAO,EAAY,CACvB,GAEA,EAA4C,EAEhD,EAAe,OAAO,CAAC,CAAC,CAAA,MAAE,CAAK,CAAA,OAAE,CAAM,CAAE,IACrC,EAA8B,EAA4B,MAAM,CAAC,CAAC,EAAK,IAC5D,IAAK,KAAQ,AAAA,EAChB,EACA,EACA,GACD,CACJ,EAAE,CACT,GAEA,EAA4B,OAAO,CAAC,AAAC,IACjC,IAAI,CAAC,qBAAqB,CAAC,EAAU,EAAW,EAAK,OAAO,CAChE,EACJ,GAEA,EAAQ,YAAY,CAAC,EAAW,EAAG,EACvC,EACJ,CAEA,OAAe,cAAc,CAAuC,CAAE,CAAS,CAAE,CAAS,CAAE,CAAoB,CAAE,CAC9G,EAAU,IAAI,CAAC,EAAK,CAAA,AAAkB,EAAlB,EAAU,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAM,CAAG,CAAK,CAAC,EAAE,CAC5D,EAAU,IAAI,CAAC,EAAK,CAAA,AAAkB,EAAlB,EAAU,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAQ,EAAE,CAAG,CAAK,CAAC,EAAE,CAChE,EAAU,IAAI,CAAC,EAAK,CAAA,AAAkB,EAAlB,EAAU,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAQ,EAAE,CAAG,CAAK,CAAC,EAAE,CAChE,EAAU,IAAI,CAAC,EAAK,CAAA,AAAkB,EAAlB,EAAU,KAAK,AAAG,EAAK,AAAI,EAAJ,EAAQ,EAAE,CAAG,CAAK,CAAC,EAAE,AACpE,CAEA,OAAe,sBAAsB,CAAoB,CAAE,CAAoB,CAAE,CAAuB,CAAE,CACtG,uCAAuC;AACvC,IAAM,EAAmB,IAAI,EAAS,EAAG,EAAG,IACtC,EAAwB,AAAA,EAAkB,GAE1C,CAAA,OAAE,CAAM,CAAE,CAAG,EACf,EAAmB,EAEnB,GACA,CAAA,EAAmB,KAAK,GAAG,CAAC,AAAA,EAAgB,EAAuB,GAAS,GADhF,EAIA,IAAM,EAAW,CACb,CACI,EAAG,EAAS,QAAQ,CAAC,EAAE,CAAC,CAAC,CACzB,EAAG,EAAS,QAAQ,CAAC,EAAE,CAAC,CAAC,CACzB,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,CAC9B,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,CAC9B,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,AAClC,EACA,CACI,EAAG,EAAS,QAAQ,CAAC,EAAE,CAAC,CAAC,CACzB,EAAG,EAAS,QAAQ,CAAC,EAAE,CAAC,CAAC,CACzB,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,CAC9B,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,CAC9B,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,AAClC,EACA,CACI,EAAG,EAAS,QAAQ,CAAC,EAAE,CAAC,CAAC,CACzB,EAAG,EAAS,QAAQ,CAAC,EAAE,CAAC,CAAC,CACzB,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,CAC9B,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,CAC9B,EAAG,EAAS,aAAa,CAAC,EAAE,CAAC,CAAC,AAClC,EACH,CAAC,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,CAAC,CAAG,EAAE,CAAC,EAEtB,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CAEjC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CAErC,EAAS,EACT,EAAS,EACT,EAAS,EACT,EAAS,EACT,EAAS,EACT,EAAS,EACT,EAAS,EACT,EAAS,EAab,GAXI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EAEI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EAEI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EAEI,EACA,IAAK,IAAI,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,GAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,IAAK,CAEjD,IAAI,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAE3C,EAAW,EACX,EAAW,EACX,EAAW,EAGX,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAG3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAE3C,EAAK,IACL,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,CACvB,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,CACvB,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,CACvB,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,EAG3B,IAAI,EAAI,EACF,EAAQ,EAAK,CAAA,EAAK,CAAA,EAExB,EAAW,EACX,EAAW,EACX,EAAW,EAEX,IAAK,IAAI,EAAI,EAAI,EAAI,EAAI,IAAK,CAC1B,mCAAmC;AACnC,EAAY,AAAA,CAAA,EAAI,CAAA,EAAK,EAAK,EAAI,EAC9B,EAAY,AAAA,CAAA,EAAI,CAAA,EAAK,EAAK,EAAI,EAC9B,EAAY,AAAA,CAAA,EAAI,CAAA,EAAK,EAAK,EAAI,EAE9B,IAAM,EAAmB,EACnB,AAAA,EACE,EACA,EAAW,EACX,EAAW,GAEb,CAAE,IAAK,IAAK,IAAK,IAAK,CAE5B,IAAI,CAAC,aAAa,CACd,CACI,CAAgB,CAAC,EAAE,CAAG,EACtB,CAAgB,CAAC,EAAE,CAAG,EACtB,CAAgB,CAAC,EAAE,CAAG,EACtB,CAAgB,CAAC,EAAE,CACtB,CACD,KAAK,KAAK,CAAC,GACX,KAAK,KAAK,CAAC,GACX,GAGJ,GAAK,CACT,CACJ,CAoBJ,GAjBA,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CACnC,EAAM,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAG,CAAQ,CAAC,EAAE,CAAC,CAAC,CAG/B,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EAEA,EAAS,EACT,EAAS,EAEL,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EACI,GAAK,CAAA,EAAS,EAAM,KAAK,GAAG,CAAC,EAAjC,EAEI,EACA,IAAK,IAAI,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,GAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,IAAK,CACjD,IAAI,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAE3C,EAAW,EACX,EAAW,EACX,EAAW,EAGX,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAG3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAC3C,EAAK,CAAQ,CAAC,EAAE,CAAC,CAAC,CAAI,AAAA,CAAA,EAAI,CAAQ,CAAC,EAAE,CAAC,CAAA,AAAA,EAAK,EAE3C,EAAK,IACL,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,CACvB,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,CACvB,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,CACvB,CAAE,EAAI,EAAI,CAAG,CAAE,EAAI,EAAI,EAG3B,EAAW,EACX,EAAW,EACX,EAAW,EAEX,IAAM,EAAQ,EAAK,CAAA,EAAK,CAAA,EACpB,EAAI,EAER,IAAK,IAAI,EAAI,EAAI,EAAI,EAAI,IAAK,CAC1B,EAAY,AAAA,CAAA,EAAI,CAAA,EAAK,EAAK,EAAI,EAC9B,EAAY,AAAA,CAAA,EAAI,CAAA,EAAK,EAAK,EAAI,EAC9B,EAAY,AAAA,CAAA,EAAI,CAAA,EAAK,EAAK,EAAI,EAE9B,IAAM,EAAmB,EACnB,AAAA,EACE,EACA,EAAW,EACX,EAAW,GAEb,CAAE,IAAK,IAAK,IAAK,IAAK,CAE5B,IAAI,CAAC,aAAa,CACd,CACI,CAAgB,CAAC,EAAE,CAAG,EACtB,CAAgB,CAAC,EAAE,CAAG,EACtB,CAAgB,CAAC,EAAE,CAAG,EACtB,CAAgB,CAAC,EAAE,CACtB,CACD,KAAK,KAAK,CAAC,GACX,KAAK,KAAK,CAAC,GACX,GAGJ,GAAK,CACT,CACJ,CAER,CACJ,C,I,E,C,EEnUA,EAAiB,22BCEV,OAAM,EAIT,YAAY,CAAuB,CAAE,CAAmB,CAAE,CACtD,IAAI,CAAC,UAAU,CAAG,EAClB,IAAI,CAAC,QAAQ,CAAG,CACpB,CAEA,IAAI,WAAY,CACZ,OAAO,IAAI,CAAC,UAAU,AAC1B,CAEA,IAAI,UAAU,CAAK,CAAE,CACjB,IAAI,CAAC,UAAU,CAAG,CACtB,CAEA,IAAI,SAAU,CACV,OAAO,IAAI,CAAC,QAAQ,AACxB,CAEA,IAAI,QAAQ,CAAK,CAAE,CACf,IAAI,CAAC,QAAQ,CAAG,CACpB,CACJ,C,I,E,C,EC1BA,EAAiB,IAAA,IAAoB,4CAAA,YAAA,GAAA,EAA6C,QAAQ,EIQnF,OAAM,EAQT,YAAY,CAAA,SAAE,CAAQ,CAAA,SAAE,CAAQ,CAAkB,CAAE,CAChD,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,sBAAsB,CAAC,KACpD,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,sBAAsB,CAAC,KACpD,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,sBAAsB,CAAC,KACpD,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,qBAAqB,EACrD,CAEA,IAAI,gBAAiB,CACjB,OAAO,IAAI,CAAC,eAAe,AAC/B,CAEA,IAAI,UAAW,CACX,OAAO,IAAI,CAAC,SAAS,AACzB,CAEA,IAAI,UAAW,CACX,OAAO,IAAI,CAAC,SAAS,AACzB,CAEA,IAAI,SAAS,CAAe,CAAE,CAC1B,IAAM,EAAc,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAK,EAAM,CAAC,CACzC,EAAc,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAK,EAAM,CAAC,CACzC,EAAc,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAK,EAAM,CAAC,AAE/C,CAAA,IAAI,CAAC,SAAS,CAAG,EAEb,GAAa,IAAI,CAAC,yBAAyB,CAAC,KAC5C,GAAa,IAAI,CAAC,yBAAyB,CAAC,KAC5C,GAAa,IAAI,CAAC,yBAAyB,CAAC,KAE5C,CAAA,GAAe,GAAe,CAAA,GAC9B,CAAA,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,qBAAqB,EADrD,CAGJ,CAEA,IAAI,SAAS,CAAe,CAAE,CAC1B,IAAI,CAAC,SAAS,CAAG,CACrB,CAEQ,uBAAwB,CAC5B,OAAO,AAAA,EACH,IAAI,CAAC,gBAAgB,CACrB,AAAA,EACI,IAAI,CAAC,gBAAgB,CACrB,IAAI,CAAC,gBAAgB,EAGjC,CAEQ,0BAA0B,CAAqB,CAAE,CACrD,OAAQ,GACR,IAAK,IAAK,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,sBAAsB,CAAC,GAAM,KACpE,KAAK,IAAK,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,sBAAsB,CAAC,GAAM,KACpE,KAAK,IAAK,IAAI,CAAC,gBAAgB,CAAG,IAAI,CAAC,sBAAsB,CAAC,EAC9D,CACJ,CAEQ,uBAAuB,CAAqB,CAAE,CAClD,OAAQ,GACR,IAAK,IAAK,OAAO,AAAA,EAAsB,IAAI,CAAC,QAAQ,CAAC,CAAC,CACtD,KAAK,IAAK,OAAO,AAAA,EAAsB,IAAI,CAAC,QAAQ,CAAC,CAAC,CACtD,KAAK,IAAK,OAAO,AAAA,EAAsB,IAAI,CAAC,QAAQ,CAAC,CAAC,CACtD,CACJ,CACJ,CD9EO,MAAM,EAIT,YAAY,CAAA,SAAE,CAAQ,CAAA,SAAE,CAAQ,CAAA,OAAE,CAAM,CAAmB,CAAE,CACzD,IAAI,CAAC,UAAU,CAAG,IAAI,EAAU,CAAE,SAAA,EAAU,SAAA,CAAS,GACrD,IAAI,CAAC,OAAO,CAAG,CACnB,CAEA,IAAI,QAAS,CACT,OAAO,IAAI,CAAC,OAAO,AACvB,CAEA,IAAI,WAAY,CACZ,OAAO,IAAI,CAAC,UAAU,AAC1B,CAEA,IAAI,UAAW,CACX,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,AACnC,CAEA,IAAI,UAAW,CACX,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,AACnC,CAEA,IAAI,OAAO,CAAK,CAAE,CACd,IAAI,CAAC,OAAO,CAAG,CACnB,CAEA,IAAI,SAAS,CAAK,CAAE,CAChB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAG,CAC/B,CAEA,IAAI,SAAS,CAAK,CAAE,CAChB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAG,CAC/B,CACJ,CD5BA,wGAAwG;AACxG,oCAAoC;AACpC,MAAM,EAAc,IAAI,EAAS,EAAG,GAAI,GAElC,EAAuB,CACzB,cAAe,IACf,eAAgB,IAChB,KAAM,IACN,MAAO,GACP,IAAK,EACT,CAIO,OAAM,UAAe,EAQxB,YAAY,CAAA,SAAE,CAAQ,CAAA,SAAE,CAAQ,CAAA,QAAE,CAAO,CAAe,CAAE,CACtD,KAAK,CAAC,CAAE,SAAA,EAAU,SAAA,CAAS,GAE3B,IAAI,CAAC,QAAQ,CAAG,IAAI,EAAS,EAAG,EAAG,GACnC,IAAI,CAAC,cAAc,CAAG,GAAS,eAAiB,EAAqB,aAAa,CAClF,IAAI,CAAC,eAAe,CAAG,GAAS,gBAAkB,EAAqB,cAAc,CACrF,IAAI,CAAC,KAAK,CAAG,GAAS,MAAQ,EAAqB,IAAI,CACvD,IAAI,CAAC,MAAM,CAAG,GAAS,OAAS,EAAqB,KAAK,CAC1D,IAAI,CAAC,IAAI,CAAG,GAAS,KAAO,EAAqB,GAAG,AACxD,CAEA,IAAW,eAAgB,CACvB,OAAO,IAAI,CAAC,cAAc,AAC9B,CAEA,IAAW,cAAc,CAA6C,CAAE,CACpE,IAAI,CAAC,cAAc,CAAG,CAC1B,CAEA,IAAW,gBAAiB,CACxB,OAAO,IAAI,CAAC,eAAe,AAC/B,CAEA,IAAW,eAAe,CAA8C,CAAE,CACtE,IAAI,CAAC,eAAe,CAAG,CAC3B,CAEA,IAAW,MAAO,CACd,OAAO,IAAI,CAAC,KAAK,AACrB,CAEA,IAAW,KAAK,CAAoC,CAAE,CAClD,IAAI,CAAC,KAAK,CAAG,CACjB,CAEA,IAAW,OAAQ,CACf,OAAO,IAAI,CAAC,MAAM,AACtB,CAEA,IAAW,MAAM,CAAqC,CAAE,CACpD,IAAI,CAAC,MAAM,CAAG,CAClB,CAEA,IAAW,IAAI,CAAmC,CAAE,CAChD,IAAI,CAAC,IAAI,CAAG,CAChB,CAEA,IAAW,KAAM,CACb,OAAO,IAAI,CAAC,IAAI,AACpB,CAEA,IAAW,qBAAsB,CAC7B,OAAO,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,cAAc,AACrD,CAEA,IAAW,YAAa,CACpB,OAAO,EAAI,KAAK,GAAG,CAAC,AAAY,GAAZ,IAAI,CAAC,IAAI,CAAS,IAAM,KAAK,EAAE,CACvD,CAEO,oBAAoB,CAAuB,CAAE,CAChD,IAAI,CAAC,QAAQ,CAAG,CACpB,CAEA,IAAW,WAAsF,CAC7F,IAAM,EAAiB,IAAI,CAAC,SAAS,CAAC,cAAc,CAE9C,EAAgB,AAAA,EAAuB,IAAI,CAAC,QAAQ,CAAE,GAEtD,EAAa,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAE/B,EAAU,AAAA,EAAkB,EAAW,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAC7D,EAAK,AAAA,EACP,EAAY,QAAQ,CAChB,AAAA,EACI,EACA,AAAA,EAAgB,EAAa,MAKnC,EAAQ,AAAA,EAAgB,EAAI,GAElC,MAAO,CAAE,QAAA,EAAS,GAAA,EAAI,MAAA,EAAO,SAAU,IAAI,CAAC,QAAQ,AAAC,CACzD,CAEA,IAAW,YAAa,CACpB,GAAM,CAAA,SAAE,CAAQ,CAAA,MAAE,CAAK,CAAA,GAAE,CAAE,CAAA,QAAE,CAAO,CAAE,CAAG,IAAI,CAAC,SAAS,CAEvD,OAAO,AAAA,EACH,AAAA,EAAkB,EAAU,EAAO,EAAI,GAE/C,CACJ,CXvHA,MAAM,EAAS,SAAS,cAAc,CAAC,UACjC,EAAU,EAAO,UAAU,CAAC,MAE5B,EAAS,IUPR,cAAuB,EAC1B,YAAY,CAAA,SAAE,CAAQ,CAAA,SAAE,CAAQ,CAAiB,CAAE,CAC/C,KAAK,CAAC,CAAE,SAAA,EAAU,SAAA,CAAS,EAC/B,CACJ,EVG4B,CACxB,SAAU,IAAI,EAAS,EAAG,EAAG,GAC7B,SAAU,IAAI,EAAS,EAAG,EAAG,EACjC,EAEA,CAAA,OAAO,MAAM,CAAG,EAEhB,KAAM,CAAA,oBACF,CAAmB,CAAA,WACnB,CAAU,CAAA,KACV,CAAI,CAAA,MACJ,CAAK,CAAA,cACL,CAAa,CAAA,eACb,CAAc,CACjB,CAAG,EAEE,ECoDK,CACH,CAAE,ADrDsC,EAAqB,ECqDrC,EAAG,EAAG,EAAG,CACjC,CAAE,EDtD2D,ECsDhD,EAAG,EAAG,CACnB,CAAE,EAAG,EAAG,ADvDiE,ECuDzD,CAAA,ADvDyD,EAAM,CCuDxD,EAAQ,EAAG,CAClC,CAAE,EAAG,EAAI,CDxDgE,EAAM,ECwDpD,CAAA,ADxD8C,EAAM,CCwD7C,EAAQ,EAAG,CAChD,CDvDL,OAAO,gBAAgB,CAAC,WAAY,AAAC,IACjC,GAAM,CAAA,QACF,CAAO,CAAA,MACP,CAAK,CAAA,GAEL,CAAE,CACL,CAAG,EAAO,SAAS,CACpB,OAAQ,EAAM,IAAI,EAClB,IAAK,OAAQ,CACT,IAAM,EAAW,AAAA,EAAuB,EAAS,GACjD,CAAA,EAAO,QAAQ,CAAG,EAAO,QAAQ,CAAC,GAAG,CAAC,GACtC,KACJ,CACA,IAAK,OAAQ,CACT,IAAM,EAAW,AAAA,EAAuB,EAAS,GACjD,CAAA,EAAO,QAAQ,CAAG,EAAO,QAAQ,CAAC,QAAQ,CAAC,GAC3C,KACJ,CACA,IAAK,OAAQ,CACT,IAAM,EAAS,AAAA,EAAuB,EAAO,IAC7C,CAAA,EAAO,QAAQ,CAAG,EAAO,QAAQ,CAAC,QAAQ,CAAC,GAC3C,KACJ,CACA,IAAK,OAAQ,CACT,IAAM,EAAS,AAAA,EAAuB,EAAO,IAC7C,CAAA,EAAO,QAAQ,CAAG,EAAO,QAAQ,CAAC,GAAG,CAAC,GACtC,KACJ,CACA,IAAK,OAAQ,CACT,IAAM,EAAM,AAAA,EAAuB,EAAI,IACvC,CAAA,EAAO,QAAQ,CAAG,EAAO,QAAQ,CAAC,QAAQ,CAAC,GAC3C,KACJ,CACA,IAAK,OAAQ,CACT,IAAM,EAAM,AAAA,EAAuB,EAAI,IACvC,CAAA,EAAO,QAAQ,CAAG,EAAO,QAAQ,CAAC,GAAG,CAAC,GACtC,KACJ,CACA,IAAK,OACD,EAAO,QAAQ,CACP,IAAI,EACA,EAAO,QAAQ,CAAC,CAAC,CACjB,EAAO,QAAQ,CAAC,CAAC,CAAG,GACpB,EAAO,QAAQ,CAAC,CAAC,EAE7B,KAEJ,KAAK,OACD,EAAO,QAAQ,CACP,IAAI,EACA,EAAO,QAAQ,CAAC,CAAC,CACjB,EAAO,QAAQ,CAAC,CAAC,CAAG,GACpB,EAAO,QAAQ,CAAC,CAAC,CAKjC,CACJ,GAEA,IAAI,EAAW,EAEf,MAAM,EAAa,SAAS,cAAc,CAAC,OAE3C,AMrFO,CAAA,MACH,aAAqB,kBAAmB,CACpC,IAAM,EAAW,MAAM,MAAM,WAAA,EAAA,EAAA,IACvB,EAAW,MAAM,EAAS,IAAI,GAC9B,EAAS,MAAM,kBAAkB,GACjC,EAAkB,SAAS,aAAa,CAAC,UACzC,EAAyB,EAAgB,UAAU,CAAC,MAK1D,OAJA,EAAgB,KAAK,CAAG,EAAO,KAAK,CACpC,EAAgB,MAAM,CAAG,EAAO,MAAM,CACtC,EAAuB,SAAS,CAAC,EAAQ,EAAG,GAErC,EAAuB,YAAY,CAAC,EAAG,EAAG,EAAgB,KAAK,CAAE,EAAgB,MAAM,CAClG,CAEA,iCAAiC;AACjC,aAAa,aAAe,KASpB,EARJ,IAAM,EAAO,AAAA,WAAA,EAAA,EAAA,GAAU,KAAK,CAAC,MAEvB,EAAuB,EAAE,CAGzB,EAAyC,CAAE,CAAC,UAAW,EAAE,AAAA,EAAG,CAE5D,EAA4B,EAAE,CAGhC,EAAU,EA4Dd,OA1DA,EAAK,OAAO,CAAC,AAAC,IAMV,GALgB,MAAZ,CAAI,CAAC,EAAE,EAEP,CAAA,CAAO,GAAC,EAAQ,CAAG,CAAE,UAAW,EAAE,AAAC,CAAA,EAGnC,AAAY,MAAZ,CAAI,CAAC,EAAE,EACP,GAAI,AAAY,MAAZ,CAAI,CAAC,EAAE,CAAU,CACjB,IAAM,EAAO,EAAK,KAAK,CAAC,KACxB,EAAc,IAAI,CAAC,IAAI,EAAS,OAAO,CAAI,CAAC,EAAE,EAAG,OAAO,CAAI,CAAC,EAAE,GACnE,KAAO,CACH,IAAM,EAAO,EAAK,KAAK,CAAC,KACxB,EAAS,IAAI,CAAC,IAAI,EAAS,OAAO,CAAI,CAAC,EAAE,EAAG,OAAO,CAAI,CAAC,EAAE,EAAG,OAAO,CAAI,CAAC,EAAE,GAC/E,EAER,GAEA,EAAK,OAAO,CAAC,AAAC,IACV,GAAI,AAAY,MAAZ,CAAI,CAAC,EAAE,EACP,GAAI,AAAyB,IAAzB,EAAc,MAAM,CAAQ,CAC5B,IAAM,EAAO,EAAK,KAAK,CAAC,KACxB,CAAO,CAAC,EAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAW,CAC3C,SAAU,CACN,CAAQ,CAAC,CAAI,CAAC,EAAE,CAAG,EAAE,CACrB,CAAQ,CAAC,CAAI,CAAC,EAAE,CAAG,EAAE,CACrB,CAAQ,CAAC,CAAI,CAAC,EAAE,CAAG,EAAE,CACxB,CACD,cAAe,CACX,IAAI,EAAS,EAAG,GAChB,IAAI,EAAS,EAAG,GAChB,IAAI,EAAS,EAAG,GACnB,AACL,GACJ,KAAO,CACH,IAAM,EAAO,EAAK,KAAK,CAAC,KAAK,GAAG,CAAC,AAAC,GACvB,EAAG,KAAK,CAAC,MAGpB,CAAO,CAAC,EAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAW,CAC3C,SAAU,CACN,CAAQ,CAAC,CAAI,CAAC,EAAE,CAAC,EAAE,CAAG,EAAE,CACxB,CAAQ,CAAC,CAAI,CAAC,EAAE,CAAC,EAAE,CAAG,EAAE,CACxB,CAAQ,CAAC,CAAI,CAAC,EAAE,CAAC,EAAE,CAAG,EAAE,CAC3B,CACD,cAAe,CACX,CAAa,CAAC,CAAI,CAAC,EAAE,CAAC,EAAE,CAAG,EAAE,CAC7B,CAAa,CAAC,CAAI,CAAC,EAAE,CAAC,EAAE,CAAG,EAAE,CAC7B,CAAa,CAAC,CAAI,CAAC,EAAE,CAAC,EAAE,CAAG,EAAE,CAChC,AACL,GACJ,EAER,GAE6B,IAAzB,EAAc,MAAM,EACpB,CAAA,EAAc,MAAM,IAAI,CAAC,gBAAgB,EAD7C,EAIO,EAAQ,GAAG,CAAC,AAAC,GACT,IAAI,EAAK,EAAK,SAAS,CAAE,GAExC,CACJ,CAAA,ENLU,WAAW,GAAG,IAAI,CAAC,AAAC,IAC1B,IAAM,EAAS,IAAI,EAAW,CAC1B,SAAU,IAAI,EAAS,EAAG,EAAG,GAC7B,SAAU,IAAI,EAAS,EAAG,EAAG,GAC7B,OAAA,CACJ,GAEM,EAAW,CAAE,EAAQ,CAErB,EAAS,AACX,IAEA,mCAAmC;AACnC,EAAW,WAAW,CAAG,CAAC,KAAK,EAAG,AAAA,CAAA,IAAQ,CAAA,EAAO,CAAA,CAAO,EAAI,OAAO,CAAC,GAAG,CAAC,CACxE,EAAW,EAEX,EAAO,QAAQ,CAAC,CAAC,EAAI,IACrB,EAAO,QAAQ,CAAC,CAAC,EAAI,IAErB,AAAA,EAAW,SAAS,CAAC,EAAU,EAAkB,EAAe,EAAgB,GAEhF,sBAAsB,EAC1B,EAEA,sBAAsB,EAEtB,qDAAoD;AACxD,E,4D","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-4a1066233b049dc7.js","src/main.ts","src/common/scripts.ts","src/common/Vector3D.ts","src/common/Triangle3D.ts","src/common/Vector2D.ts","src/modules/Rasterizer.ts","src/modules/ObjLoader.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-abefbbd277b4b91c.js","src/common/Mesh.ts","node_modules/@parcel/runtime-js/lib/runtime-ee90c4cd40fe3ba5.js","src/components/camera/FPCamera.ts","src/components/camera/Camera.ts","src/components/gameObject/GameObject.ts","src/components/transform/Transform.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireac70\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireac70\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"kJlzD\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", function () { return $f178beb905667278$export$6503ec6e8aabbaf; }, function (v) { return $f178beb905667278$export$6503ec6e8aabbaf = v; });\nvar $f178beb905667278$export$6503ec6e8aabbaf;\nvar $f178beb905667278$export$f7ad0328861e2f03;\n\"use strict\";\nvar $f178beb905667278$var$mapping = new Map();\nfunction $f178beb905667278$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$f178beb905667278$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $f178beb905667278$var$resolve(id) {\n    var resolved = $f178beb905667278$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$f178beb905667278$export$6503ec6e8aabbaf = $f178beb905667278$var$register;\n$f178beb905667278$export$f7ad0328861e2f03 = $f178beb905667278$var$resolve;\n\n});\n\nvar $13ef1b4331284c21$exports = {};\n\n(parcelRequire(\"kJlzD\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"81ar2\",\"index.fb75d90a.js\",\"73iMo\",\"cubetexture.0f1795bd.jpg\"]'));\n\nclass $c9d312133f17609a$export$fe203bd8c6486855 {\n    constructor(x, y, z, w = 1){\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    add(otherVec) {\n        return new $c9d312133f17609a$export$fe203bd8c6486855(this.x + otherVec.x, this.y + otherVec.y, this.z + otherVec.z, this.w);\n    }\n    subtract(otherVec) {\n        return new $c9d312133f17609a$export$fe203bd8c6486855(this.x - otherVec.x, this.y - otherVec.y, this.z - otherVec.z, this.w);\n    }\n}\n\n\n\n\nclass $25d05852a3fefe63$export$f6b39f5a8a6533a5 {\n    constructor(u, v, w = 1){\n        this.u = u;\n        this.v = v;\n        this.w = w;\n    }\n}\n\n\nconst $04f3dddf70873dfc$var$placeholderUVCoords = [\n    new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(0, 0),\n    new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(0, 0),\n    new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(0, 0)\n];\nclass $04f3dddf70873dfc$export$33863bdf254c6c3 {\n    constructor({ vertexes: vertexes, UVCoordinates: UVCoordinates = $04f3dddf70873dfc$var$placeholderUVCoords, normal: normal }){\n        this._vertexes = vertexes;\n        this._UVCoordinates = UVCoordinates;\n        this.normal = normal;\n    }\n    applyMatrixMut(matrix) {\n        this.vertexes[0] = (0, $e50145874b2b1376$export$30a0ad04fe9506e3)(this.vertexes[0], matrix), this.vertexes[1] = (0, $e50145874b2b1376$export$30a0ad04fe9506e3)(this.vertexes[1], matrix), this.vertexes[2] = (0, $e50145874b2b1376$export$30a0ad04fe9506e3)(this.vertexes[2], matrix);\n        return this;\n    }\n    normalizeInScreenSpaceMut(screenWidth, screenHeight) {\n        //account for perspective\n        this.UVCoordinates[0].u = this.UVCoordinates[0].u / this.vertexes[0].w;\n        this.UVCoordinates[0].v = this.UVCoordinates[0].v / this.vertexes[0].w;\n        this.UVCoordinates[0].w = 1 / this.vertexes[0].w;\n        this.UVCoordinates[1].u = this.UVCoordinates[1].u / this.vertexes[1].w;\n        this.UVCoordinates[1].v = this.UVCoordinates[1].v / this.vertexes[1].w;\n        this.UVCoordinates[1].w = 1 / this.vertexes[1].w;\n        this.UVCoordinates[2].u = this.UVCoordinates[2].u / this.vertexes[2].w;\n        this.UVCoordinates[2].v = this.UVCoordinates[2].v / this.vertexes[2].w;\n        this.UVCoordinates[2].w = 1 / this.vertexes[2].w;\n        this.vertexes[0] = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(this.vertexes[0], 1 / this.vertexes[0].w);\n        this.vertexes[1] = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(this.vertexes[1], 1 / this.vertexes[1].w);\n        this.vertexes[2] = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(this.vertexes[2], 1 / this.vertexes[2].w);\n        this.vertexes[0] = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(this.vertexes[0], -1);\n        this.vertexes[1] = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(this.vertexes[1], -1);\n        this.vertexes[2] = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(this.vertexes[2], -1);\n        this.vertexes[0].x = (this.vertexes[0].x + 1) * 0.5 * screenWidth;\n        this.vertexes[0].y = (this.vertexes[0].y + 1) * 0.5 * screenHeight;\n        this.vertexes[1].x = (this.vertexes[1].x + 1) * 0.5 * screenWidth;\n        this.vertexes[1].y = (this.vertexes[1].y + 1) * 0.5 * screenHeight;\n        this.vertexes[2].x = (this.vertexes[2].x + 1) * 0.5 * screenWidth;\n        this.vertexes[2].y = (this.vertexes[2].y + 1) * 0.5 * screenHeight;\n        return this;\n    }\n    getVertexCopies() {\n        return this._vertexes.map((vertex)=>{\n            return new (0, $c9d312133f17609a$export$fe203bd8c6486855)(vertex.x, vertex.y, vertex.z, vertex.w);\n        });\n    }\n    getUVCoordinatesCopies() {\n        return this._UVCoordinates.map((vec)=>{\n            return new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(vec.u, vec.v, vec.w);\n        });\n    }\n    getNormalCopy() {\n        if (this.normal) return new (0, $c9d312133f17609a$export$fe203bd8c6486855)(this.normal.x, this.normal.y, this.normal.z, this.normal.w);\n        else return undefined;\n    }\n    getCopy() {\n        return new $04f3dddf70873dfc$export$33863bdf254c6c3({\n            vertexes: this.getVertexCopies(),\n            UVCoordinates: this.getUVCoordinatesCopies(),\n            normal: this.getNormalCopy()\n        });\n    }\n    get vertexes() {\n        return this._vertexes;\n    }\n    get UVCoordinates() {\n        return this._UVCoordinates;\n    }\n    set vertexes(value) {\n        this._vertexes = value;\n    }\n    set UVCoordinates(value) {\n        this._UVCoordinates = value;\n    }\n}\n\n\n\nconst $e50145874b2b1376$export$fc85d8c44b058d59 = (vector)=>{\n    return Math.sqrt($e50145874b2b1376$export$d269a5f7e82fc116(vector, vector));\n};\nconst $e50145874b2b1376$export$70da8fd9d46ea007 = (vector)=>{\n    const length = $e50145874b2b1376$export$fc85d8c44b058d59(vector);\n    return new (0, $c9d312133f17609a$export$fe203bd8c6486855)(vector.x / length, vector.y / length, vector.z / length);\n};\nconst $e50145874b2b1376$export$d269a5f7e82fc116 = (vec1, vec2)=>{\n    return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;\n};\nconst $e50145874b2b1376$export$c2244c86a719847d = (v0, v1)=>{\n    return new (0, $c9d312133f17609a$export$fe203bd8c6486855)(v0.y * v1.z - v0.z * v1.y, v0.z * v1.x - v0.x * v1.z, v0.x * v1.y - v0.y * v1.x);\n};\nconst $e50145874b2b1376$export$645791507f53d7fb = ()=>{\n    return [\n        [\n            1,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            1,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            1,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            1\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$dfcaef75cdfc45e9 = (angleRad)=>{\n    return [\n        [\n            1,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            Math.cos(angleRad),\n            Math.sin(angleRad),\n            0\n        ],\n        [\n            0,\n            -Math.sin(angleRad),\n            Math.cos(angleRad),\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            1\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$3dc04abe5d063593 = (angleRad)=>{\n    return [\n        [\n            Math.cos(angleRad),\n            Math.sin(angleRad),\n            0,\n            0\n        ],\n        [\n            -Math.sin(angleRad),\n            Math.cos(angleRad),\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            1,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            1\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$50406abad8619e0f = (angleRad)=>{\n    return [\n        [\n            Math.cos(angleRad),\n            0,\n            Math.sin(angleRad),\n            0\n        ],\n        [\n            0,\n            1,\n            0,\n            0\n        ],\n        [\n            -Math.sin(angleRad),\n            0,\n            Math.cos(angleRad),\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            1\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$dd797979fd17c2a4 = (x, y, z)=>{\n    return [\n        [\n            1,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            1,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            1,\n            0\n        ],\n        [\n            x,\n            y,\n            z,\n            1\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$3fb2efb4293ebbde = (aspectRatio, fovRad, zFar, zNear)=>{\n    return [\n        [\n            aspectRatio * fovRad,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            fovRad,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            zFar / (zFar - zNear),\n            1\n        ],\n        [\n            0,\n            0,\n            -zFar * zNear / (zFar - zNear),\n            0\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$f1a206b972840bf9 = (rotation, position)=>{\n    const zRotationMatrix = $e50145874b2b1376$export$3dc04abe5d063593(rotation.z);\n    const xRotationMatrix = $e50145874b2b1376$export$dfcaef75cdfc45e9(rotation.x);\n    const yRotationMatrix = $e50145874b2b1376$export$50406abad8619e0f(rotation.y);\n    const translationMatrix = $e50145874b2b1376$export$dd797979fd17c2a4(position.x, position.y, position.z);\n    //FIXME: зарефачить\n    return $e50145874b2b1376$export$64ee27503e96420c($e50145874b2b1376$export$64ee27503e96420c($e50145874b2b1376$export$64ee27503e96420c(zRotationMatrix, xRotationMatrix), yRotationMatrix), translationMatrix);\n};\nconst $e50145874b2b1376$export$30a0ad04fe9506e3 = (vec3D, matrix)=>{\n    const x = vec3D.x * matrix[0][0] + vec3D.y * matrix[1][0] + vec3D.z * matrix[2][0] + vec3D.w * matrix[3][0];\n    const y = vec3D.x * matrix[0][1] + vec3D.y * matrix[1][1] + vec3D.z * matrix[2][1] + vec3D.w * matrix[3][1];\n    const z = vec3D.x * matrix[0][2] + vec3D.y * matrix[1][2] + vec3D.z * matrix[2][2] + vec3D.w * matrix[3][2];\n    const w = vec3D.x * matrix[0][3] + vec3D.y * matrix[1][3] + vec3D.z * matrix[2][3] + vec3D.w * matrix[3][3];\n    return new (0, $c9d312133f17609a$export$fe203bd8c6486855)(x, y, z, w);\n};\nconst $e50145874b2b1376$export$64ee27503e96420c = (m0, m1)=>{\n    const matrix = [\n        [],\n        [],\n        [],\n        []\n    ];\n    for(let c = 0; c < 4; c++)for(let r = 0; r < 4; r++)matrix[r][c] = m0[r][0] * m1[0][c] + m0[r][1] * m1[1][c] + m0[r][2] * m1[2][c] + m0[r][3] * m1[3][c];\n    return matrix;\n};\nconst $e50145874b2b1376$export$c1cb189781795ee9 = (position, right, up, forward)=>{\n    return [\n        [\n            right.x,\n            right.y,\n            right.z,\n            0\n        ],\n        [\n            up.x,\n            up.y,\n            up.z,\n            0\n        ],\n        [\n            forward.x,\n            forward.y,\n            forward.z,\n            0\n        ],\n        [\n            position.x,\n            position.y,\n            position.z,\n            1\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$aebd08670a3acd15 = (m)=>{\n    //FIXME: i have no idea why it works\n    return [\n        [\n            m[0][0],\n            m[1][0],\n            m[2][0],\n            0\n        ],\n        [\n            m[0][1],\n            m[1][1],\n            m[2][1],\n            0\n        ],\n        [\n            m[0][2],\n            m[1][2],\n            m[2][2],\n            0\n        ],\n        [\n            -(m[3][0] * m[0][0] + m[3][1] * m[0][1] + m[3][2] * m[0][2]),\n            -(m[3][0] * m[1][0] + m[3][1] * m[1][1] + m[3][2] * m[1][2]),\n            -(m[3][0] * m[2][0] + m[3][1] * m[2][1] + m[3][2] * m[2][2]),\n            1\n        ]\n    ];\n};\nconst $e50145874b2b1376$export$d0a221040ae28e0d = (v, scalar)=>{\n    return new (0, $c9d312133f17609a$export$fe203bd8c6486855)(v.x * scalar, v.y * scalar, v.z * scalar, v.w);\n};\nconst $e50145874b2b1376$export$982e9c0e8681b1ba = (planePoint, planeNormal, lineStart, lineEnd)=>{\n    const normalizedPlaneNormal = $e50145874b2b1376$export$70da8fd9d46ea007(planeNormal);\n    const dPlane = -$e50145874b2b1376$export$d269a5f7e82fc116(normalizedPlaneNormal, planePoint);\n    const ad = $e50145874b2b1376$export$d269a5f7e82fc116(lineStart, normalizedPlaneNormal);\n    const bd = $e50145874b2b1376$export$d269a5f7e82fc116(lineEnd, normalizedPlaneNormal);\n    const t = (-dPlane - ad) / (bd - ad);\n    const lineStartToEnd = lineEnd.subtract(lineStart);\n    const lineToIntersect = $e50145874b2b1376$export$d0a221040ae28e0d(lineStartToEnd, t);\n    return {\n        vector: lineStart.add(lineToIntersect),\n        t: t\n    };\n};\nconst $e50145874b2b1376$export$98f9da3653dc14e9 = (vertex, planeNormal, planePoint)=>{\n    return planeNormal.x * vertex.x + planeNormal.y * vertex.y + planeNormal.z * vertex.z - $e50145874b2b1376$export$d269a5f7e82fc116(planeNormal, planePoint);\n};\nconst $e50145874b2b1376$export$ac65b8ebb19f9a88 = (planePoint, planeNormal, triangle)=>{\n    const normalizedPlaneNormal = $e50145874b2b1376$export$70da8fd9d46ea007(planeNormal);\n    const insidePoints = [];\n    const outsidePoints = [];\n    const insideUVCoordinates = [];\n    const outsideUVCoordinates = [];\n    triangle.vertexes.forEach((vertex, index)=>{\n        if ($e50145874b2b1376$export$98f9da3653dc14e9(vertex, normalizedPlaneNormal, planePoint) >= 0) {\n            insidePoints.push(vertex);\n            insideUVCoordinates.push(triangle.UVCoordinates[index]);\n        } else {\n            outsidePoints.push(vertex);\n            outsideUVCoordinates.push(triangle.UVCoordinates[index]);\n        }\n    });\n    switch(insidePoints.length){\n        //Two sides of a triangle are clipped, create new triangle\n        case 1:\n            {\n                const newV1 = $e50145874b2b1376$export$982e9c0e8681b1ba(planePoint, planeNormal, insidePoints[0], outsidePoints[0]);\n                const newV2 = $e50145874b2b1376$export$982e9c0e8681b1ba(planePoint, planeNormal, insidePoints[0], outsidePoints[1]);\n                const newTriangle = new (0, $04f3dddf70873dfc$export$33863bdf254c6c3)({\n                    vertexes: [\n                        insidePoints[0],\n                        newV1.vector,\n                        newV2.vector\n                    ],\n                    normal: triangle.normal,\n                    UVCoordinates: [\n                        insideUVCoordinates[0],\n                        new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(newV1.t * (outsideUVCoordinates[0].u - insideUVCoordinates[0].u) + insideUVCoordinates[0].u, newV1.t * (outsideUVCoordinates[0].v - insideUVCoordinates[0].v) + insideUVCoordinates[0].v, newV1.t * (outsideUVCoordinates[0].w - insideUVCoordinates[0].w) + insideUVCoordinates[0].w),\n                        new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(newV2.t * (outsideUVCoordinates[1].u - insideUVCoordinates[0].u) + insideUVCoordinates[0].u, newV2.t * (outsideUVCoordinates[1].v - insideUVCoordinates[0].v) + insideUVCoordinates[0].v, newV2.t * (outsideUVCoordinates[1].w - insideUVCoordinates[0].w) + insideUVCoordinates[0].w)\n                    ]\n                });\n                return [\n                    newTriangle\n                ];\n            }\n        //One side of a triangle is clipped, divide resulting quad into two triangles\n        case 2:\n            {\n                const newV01 = $e50145874b2b1376$export$982e9c0e8681b1ba(planePoint, planeNormal, insidePoints[0], outsidePoints[0]);\n                const newV02 = $e50145874b2b1376$export$982e9c0e8681b1ba(planePoint, planeNormal, insidePoints[1], outsidePoints[0]);\n                const newTriangle0 = new (0, $04f3dddf70873dfc$export$33863bdf254c6c3)({\n                    vertexes: [\n                        insidePoints[0],\n                        insidePoints[1],\n                        newV01.vector\n                    ],\n                    normal: triangle.normal,\n                    UVCoordinates: [\n                        insideUVCoordinates[0],\n                        insideUVCoordinates[1],\n                        new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(newV01.t * (outsideUVCoordinates[0].u - insideUVCoordinates[0].u) + insideUVCoordinates[0].u, newV01.t * (outsideUVCoordinates[0].v - insideUVCoordinates[0].v) + insideUVCoordinates[0].v, newV01.t * (outsideUVCoordinates[0].w - insideUVCoordinates[0].w) + insideUVCoordinates[0].w)\n                    ]\n                });\n                const newTriangle1 = new (0, $04f3dddf70873dfc$export$33863bdf254c6c3)({\n                    vertexes: [\n                        insidePoints[1],\n                        newTriangle0.vertexes[2],\n                        newV02.vector\n                    ],\n                    normal: triangle.normal,\n                    UVCoordinates: [\n                        insideUVCoordinates[1],\n                        newTriangle0.UVCoordinates[2],\n                        new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(newV02.t * (outsideUVCoordinates[0].u - insideUVCoordinates[1].u) + insideUVCoordinates[1].u, newV02.t * (outsideUVCoordinates[0].v - insideUVCoordinates[1].v) + insideUVCoordinates[1].v, newV02.t * (outsideUVCoordinates[0].w - insideUVCoordinates[1].w) + insideUVCoordinates[1].w)\n                    ]\n                });\n                return [\n                    newTriangle0,\n                    newTriangle1\n                ];\n            }\n        // Triangle doesnt need clipping\n        case 3:\n            return [\n                triangle\n            ];\n        // Triangle is completely clipped\n        default:\n            return [];\n    }\n};\nconst $e50145874b2b1376$export$4211d36b082f0bb2 = (textureData, u, v)=>{\n    const { width: width, height: height } = textureData;\n    //convert texture space coordinates to indexes\n    const x = Math.round(v * width);\n    const y = Math.round(u * height);\n    return [\n        textureData.data[y * (textureData.width * 4) + x * 4],\n        textureData.data[y * (textureData.width * 4) + x * 4 + 1],\n        textureData.data[y * (textureData.width * 4) + x * 4 + 2],\n        textureData.data[y * (textureData.width * 4) + x * 4 + 3]\n    ];\n};\n\n\n\n\nclass $3e58c13e710daa6e$export$56b36b3cdc60a1f9 {\n    static rasterize(data, projectionMatrix, sWidth, sHeight, context) {\n        //FIXME: плейсхолдер\n        const camera = window.camera;\n        const clippingPlanes = [\n            {\n                point: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 0),\n                normal: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 1, 0)\n            },\n            {\n                point: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, camera.viewportHeight - 1, 0),\n                normal: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, -1, 0)\n            },\n            {\n                point: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 0),\n                normal: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(1, 0, 0)\n            },\n            {\n                point: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(camera.viewportWidth - 1, 0, 0),\n                normal: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(-1, 0, 0)\n            }\n        ];\n        data.forEach((gameObject)=>{\n            const worldMatrix = (0, $e50145874b2b1376$export$f1a206b972840bf9)(gameObject.rotation, gameObject.position);\n            const imageData = context.createImageData(context.canvas.width, context.canvas.height);\n            gameObject.meshes?.forEach((mesh)=>{\n                const viewMatrix = camera.viewMatrix;\n                const clippedTriangles = mesh.triangles.reduce((res, triangle)=>{\n                    const translatedTriangle = triangle.getCopy();\n                    translatedTriangle.applyMatrixMut(worldMatrix);\n                    const line1 = translatedTriangle.vertexes[1].subtract(translatedTriangle.vertexes[0]);\n                    const line2 = translatedTriangle.vertexes[2].subtract(translatedTriangle.vertexes[0]);\n                    const normal = (0, $e50145874b2b1376$export$70da8fd9d46ea007)((0, $e50145874b2b1376$export$c2244c86a719847d)(line1, line2));\n                    const cameraDotProduct = (0, $e50145874b2b1376$export$d269a5f7e82fc116)(normal, translatedTriangle.vertexes[0].subtract(camera.position));\n                    if (cameraDotProduct >= 0 || isNaN(cameraDotProduct)) return res;\n                    translatedTriangle.applyMatrixMut(viewMatrix);\n                    //Clip triangle against near plane\n                    const clippedTriangles = (0, $e50145874b2b1376$export$ac65b8ebb19f9a88)(new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, camera.zNear), new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 1), translatedTriangle).map((triangle)=>{\n                        triangle.normal = normal;\n                        return triangle.applyMatrixMut(projectionMatrix).normalizeInScreenSpaceMut(sWidth, sHeight);\n                    }, []);\n                    return [\n                        ...res,\n                        ...clippedTriangles\n                    ];\n                }, [])//FIXME: нужно все треугольники в сцене сортировать, а не в меше\n                .sort((t0, t1)=>{\n                    const averageZ0 = (t0.vertexes[0].z + t0.vertexes[1].z + t0.vertexes[2].z) / 3;\n                    const averageZ1 = (t1.vertexes[0].z + t1.vertexes[1].z + t1.vertexes[2].z) / 3;\n                    return averageZ1 - averageZ0;\n                });\n                let screenSpaceClippedTriangles = clippedTriangles;\n                clippingPlanes.forEach(({ point: point, normal: normal })=>{\n                    screenSpaceClippedTriangles = screenSpaceClippedTriangles.reduce((res, triangle)=>{\n                        return [\n                            ...res,\n                            ...(0, $e50145874b2b1376$export$ac65b8ebb19f9a88)(point, normal, triangle)\n                        ];\n                    }, []);\n                });\n                screenSpaceClippedTriangles.forEach((triangle)=>{\n                    this._generateTriangleData(triangle, imageData, mesh.texture);\n                });\n            });\n            context.putImageData(imageData, 0, 0);\n        });\n    }\n    static _setPixelData(value, x, y, imageData) {\n        imageData.data[y * (imageData.width * 4) + x * 4] = value[0];\n        imageData.data[y * (imageData.width * 4) + x * 4 + 1] = value[1];\n        imageData.data[y * (imageData.width * 4) + x * 4 + 2] = value[2];\n        imageData.data[y * (imageData.width * 4) + x * 4 + 3] = value[3];\n    }\n    static _generateTriangleData(triangle, imageData, textureData) {\n        //FIXME: потереть когда будет освещение\n        const lightPlaceholder = new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, -1);\n        const normalizedLightVector = (0, $e50145874b2b1376$export$70da8fd9d46ea007)(lightPlaceholder);\n        const { normal: normal } = triangle;\n        let colorCoefficient = 1;\n        if (normal) colorCoefficient = Math.max((0, $e50145874b2b1376$export$d269a5f7e82fc116)(normalizedLightVector, normal), 0.3);\n        const vertData = [\n            {\n                x: triangle.vertexes[0].x,\n                y: triangle.vertexes[0].y,\n                u: triangle.UVCoordinates[0].u,\n                v: triangle.UVCoordinates[0].v,\n                w: triangle.UVCoordinates[0].w\n            },\n            {\n                x: triangle.vertexes[1].x,\n                y: triangle.vertexes[1].y,\n                u: triangle.UVCoordinates[1].u,\n                v: triangle.UVCoordinates[1].v,\n                w: triangle.UVCoordinates[1].w\n            },\n            {\n                x: triangle.vertexes[2].x,\n                y: triangle.vertexes[2].y,\n                u: triangle.UVCoordinates[2].u,\n                v: triangle.UVCoordinates[2].v,\n                w: triangle.UVCoordinates[2].w\n            }\n        ].sort((a, b)=>a.y - b.y);\n        let dy1 = vertData[1].y - vertData[0].y;\n        let dx1 = vertData[1].x - vertData[0].x;\n        let dv1 = vertData[1].v - vertData[0].v;\n        let du1 = vertData[1].u - vertData[0].u;\n        let dw1 = vertData[1].w - vertData[0].w;\n        const dy2 = vertData[2].y - vertData[0].y;\n        const dx2 = vertData[2].x - vertData[0].x;\n        const dv2 = vertData[2].v - vertData[0].v;\n        const du2 = vertData[2].u - vertData[0].u;\n        const dw2 = vertData[2].w - vertData[0].w;\n        let xStep1 = 0, xStep2 = 0, u1Step = 0, v1Step = 0, u2Step = 0, v2Step = 0, w1Step = 0, w2Step = 0;\n        if (dy1) xStep1 = dx1 / Math.abs(dy1);\n        if (dy2) xStep2 = dx2 / Math.abs(dy2);\n        if (dy1) u1Step = du1 / Math.abs(dy1);\n        if (dy1) v1Step = dv1 / Math.abs(dy1);\n        if (dy1) w1Step = dw1 / Math.abs(dy1);\n        if (dy2) u2Step = du2 / Math.abs(dy2);\n        if (dy2) v2Step = dv2 / Math.abs(dy2);\n        if (dy2) w2Step = dw2 / Math.abs(dy2);\n        if (dy1) for(let i = vertData[0].y; i <= vertData[1].y; i++){\n            let aX = vertData[0].x + (i - vertData[0].y) * xStep1;\n            let bX = vertData[0].x + (i - vertData[0].y) * xStep2;\n            let textureU = 0, textureV = 0, textureW = 0;\n            //starting values\n            let sU = vertData[0].u + (i - vertData[0].y) * u1Step;\n            let sV = vertData[0].v + (i - vertData[0].y) * v1Step;\n            let sW = vertData[0].w + (i - vertData[0].y) * w1Step;\n            //ending values\n            let eU = vertData[0].u + (i - vertData[0].y) * u2Step;\n            let eV = vertData[0].v + (i - vertData[0].y) * v2Step;\n            let eW = vertData[0].w + (i - vertData[0].y) * w2Step;\n            if (aX > bX) {\n                [aX, bX] = [\n                    bX,\n                    aX\n                ];\n                [sU, eU] = [\n                    eU,\n                    sU\n                ];\n                [sV, eV] = [\n                    eV,\n                    sV\n                ];\n                [sW, eW] = [\n                    eW,\n                    sW\n                ];\n            }\n            let t = 0;\n            const tStep = 1 / (bX - aX);\n            textureU = sU;\n            textureV = sV;\n            textureW = sW;\n            for(let j = aX; j < bX; j++){\n                //interpolated texture space values\n                textureU = (1 - t) * sU + t * eU;\n                textureV = (1 - t) * sV + t * eV;\n                textureW = (1 - t) * sW + t * eW;\n                const texturePixelData = textureData ? (0, $e50145874b2b1376$export$4211d36b082f0bb2)(textureData, textureU / textureW, textureV / textureW) : [\n                    255,\n                    255,\n                    255,\n                    255\n                ];\n                this._setPixelData([\n                    texturePixelData[0] * colorCoefficient,\n                    texturePixelData[1] * colorCoefficient,\n                    texturePixelData[2] * colorCoefficient,\n                    texturePixelData[3]\n                ], Math.round(j), Math.round(i), imageData);\n                t += tStep;\n            }\n        }\n        dy1 = vertData[2].y - vertData[1].y;\n        dx1 = vertData[2].x - vertData[1].x;\n        dv1 = vertData[2].v - vertData[1].v;\n        du1 = vertData[2].u - vertData[1].u;\n        dw1 = vertData[2].w - vertData[1].w;\n        if (dy1) xStep1 = dx1 / Math.abs(dy1);\n        if (dy2) xStep2 = dx2 / Math.abs(dy2);\n        u1Step = 0;\n        v1Step = 0;\n        if (dy1) u1Step = du1 / Math.abs(dy1);\n        if (dy1) v1Step = dv1 / Math.abs(dy1);\n        if (dy1) w1Step = dw1 / Math.abs(dy1);\n        if (dy1) for(let i = vertData[1].y; i <= vertData[2].y; i++){\n            let aX = vertData[1].x + (i - vertData[1].y) * xStep1;\n            let bX = vertData[0].x + (i - vertData[0].y) * xStep2;\n            let textureU = 0, textureV = 0, textureW = 0;\n            //starting values\n            let sU = vertData[1].u + (i - vertData[1].y) * u1Step;\n            let sV = vertData[1].v + (i - vertData[1].y) * v1Step;\n            let sW = vertData[1].w + (i - vertData[1].y) * w1Step;\n            //ending values\n            let eU = vertData[0].u + (i - vertData[0].y) * u2Step;\n            let eV = vertData[0].v + (i - vertData[0].y) * v2Step;\n            let eW = vertData[0].w + (i - vertData[0].y) * w2Step;\n            if (aX > bX) {\n                [aX, bX] = [\n                    bX,\n                    aX\n                ];\n                [sU, eU] = [\n                    eU,\n                    sU\n                ];\n                [sV, eV] = [\n                    eV,\n                    sV\n                ];\n                [sW, eW] = [\n                    eW,\n                    sW\n                ];\n            }\n            textureU = sU;\n            textureV = sV;\n            textureW = sW;\n            const tStep = 1 / (bX - aX);\n            let t = 0;\n            for(let j = aX; j < bX; j++){\n                textureU = (1 - t) * sU + t * eU;\n                textureV = (1 - t) * sV + t * eV;\n                textureW = (1 - t) * sW + t * eW;\n                const texturePixelData = textureData ? (0, $e50145874b2b1376$export$4211d36b082f0bb2)(textureData, textureU / textureW, textureV / textureW) : [\n                    255,\n                    255,\n                    255,\n                    255\n                ];\n                this._setPixelData([\n                    texturePixelData[0] * colorCoefficient,\n                    texturePixelData[1] * colorCoefficient,\n                    texturePixelData[2] * colorCoefficient,\n                    texturePixelData[3]\n                ], Math.round(j), Math.round(i), imageData);\n                t += tStep;\n            }\n        }\n    }\n}\n\n\nvar $db93735827a9e977$exports = {};\n$db93735827a9e977$exports = \"# Blender 4.0.2\\r\\n# www.blender.org\\r\\no Cube\\r\\nv 1.000000 1.000000 -1.000000\\r\\nv 1.000000 -1.000000 -1.000000\\r\\nv 1.000000 1.000000 1.000000\\r\\nv 1.000000 -1.000000 1.000000\\r\\nv -1.000000 1.000000 -1.000000\\r\\nv -1.000000 -1.000000 -1.000000\\r\\nv -1.000000 1.000000 1.000000\\r\\nv -1.000000 -1.000000 1.000000\\r\\nvt 0.875000 0.500000\\r\\nvt 0.625000 0.750000\\r\\nvt 0.625000 0.500000\\r\\nvt 0.375000 1.000000\\r\\nvt 0.375000 0.750000\\r\\nvt 0.625000 0.000000\\r\\nvt 0.375000 0.250000\\r\\nvt 0.375000 0.000000\\r\\nvt 0.375000 0.500000\\r\\nvt 0.125000 0.750000\\r\\nvt 0.125000 0.500000\\r\\nvt 0.625000 0.250000\\r\\nvt 0.875000 0.750000\\r\\nvt 0.625000 1.000000\\r\\ns 0\\r\\nf 5/1 3/2 1/3\\r\\nf 3/2 8/4 4/5\\r\\nf 7/6 6/7 8/8\\r\\nf 2/9 8/10 6/11\\r\\nf 1/3 4/5 2/9\\r\\nf 5/12 2/9 6/7\\r\\nf 5/1 7/13 3/2\\r\\nf 3/2 7/14 8/4\\r\\nf 7/6 5/12 6/7\\r\\nf 2/9 4/5 8/10\\r\\nf 1/3 3/2 4/5\\r\\nf 5/12 1/3 2/9\\r\\n\";\n\n\n\n\nclass $aa552dc8a9341dec$export$e176487c05830cc5 {\n    constructor(triangles, texture){\n        this._triangles = triangles;\n        this._texture = texture;\n    }\n    get triangles() {\n        return this._triangles;\n    }\n    set triangles(value) {\n        this._triangles = value;\n    }\n    get texture() {\n        return this._texture;\n    }\n    set texture(value) {\n        this._texture = value;\n    }\n}\n\n\n\nvar $8499bc89375b005f$exports = {};\n$8499bc89375b005f$exports = new URL(\"cubetexture.0f1795bd.jpg\", import.meta.url).toString();\n\n\nclass $52da8439c771a3d7$export$2fa3e0ea900f8e74 {\n    static async _loadTextureData() {\n        const response = await fetch((0, (/*@__PURE__*/$parcel$interopDefault($8499bc89375b005f$exports))));\n        const fileBlob = await response.blob();\n        const bitmap = await createImageBitmap(fileBlob);\n        const offScreenCanvas = document.createElement(\"canvas\");\n        const offScreenCanvasContext = offScreenCanvas.getContext(\"2d\");\n        offScreenCanvas.width = bitmap.width;\n        offScreenCanvas.height = bitmap.height;\n        offScreenCanvasContext.drawImage(bitmap, 0, 0);\n        return offScreenCanvasContext.getImageData(0, 0, offScreenCanvas.width, offScreenCanvas.height);\n    }\n    //FIXME: сделать загрузку по урлу\n    static async loadFromUrl() {\n        const data = (0, (/*@__PURE__*/$parcel$interopDefault($db93735827a9e977$exports))).split(\"\\n\");\n        const vertexes = [];\n        //FIXME: a bit of a hack\n        const rawData = [\n            {\n                triangles: []\n            }\n        ];\n        const UVCoordinates = [];\n        let textureData = undefined;\n        let current = 0;\n        data.forEach((line)=>{\n            if (line[0] === \"o\") {\n                current++;\n                rawData[current] = {\n                    triangles: []\n                };\n            }\n            if (line[0] === \"v\") {\n                if (line[1] === \"t\") {\n                    const data = line.split(\" \");\n                    UVCoordinates.push(new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(Number(data[1]), Number(data[2])));\n                } else {\n                    const data = line.split(\" \");\n                    vertexes.push(new (0, $c9d312133f17609a$export$fe203bd8c6486855)(Number(data[1]), Number(data[2]), Number(data[3])));\n                }\n            }\n        });\n        data.forEach((line)=>{\n            if (line[0] === \"f\") {\n                if (UVCoordinates.length === 0) {\n                    const data = line.split(\" \");\n                    rawData[current].triangles.push(new (0, $04f3dddf70873dfc$export$33863bdf254c6c3)({\n                        vertexes: [\n                            vertexes[data[1] - 1],\n                            vertexes[data[2] - 1],\n                            vertexes[data[3] - 1]\n                        ],\n                        UVCoordinates: [\n                            new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(0, 0),\n                            new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(0, 0),\n                            new (0, $25d05852a3fefe63$export$f6b39f5a8a6533a5)(0, 0)\n                        ]\n                    }));\n                } else {\n                    const data = line.split(\" \").map((el)=>{\n                        return el.split(\"/\");\n                    });\n                    rawData[current].triangles.push(new (0, $04f3dddf70873dfc$export$33863bdf254c6c3)({\n                        vertexes: [\n                            vertexes[data[1][0] - 1],\n                            vertexes[data[2][0] - 1],\n                            vertexes[data[3][0] - 1]\n                        ],\n                        UVCoordinates: [\n                            UVCoordinates[data[1][1] - 1],\n                            UVCoordinates[data[2][1] - 1],\n                            UVCoordinates[data[3][1] - 1]\n                        ]\n                    }));\n                }\n            }\n        });\n        if (UVCoordinates.length !== 0) textureData = await this._loadTextureData();\n        return rawData.map((data)=>{\n            return new (0, $aa552dc8a9341dec$export$e176487c05830cc5)(data.triangles, textureData);\n        });\n    }\n}\n\n\n\nclass $ef44e3aa01e5a5f6$export$563a914cafbdc389 {\n    constructor({ rotation: rotation, position: position }){\n        this._rotation = rotation;\n        this._position = position;\n        this._rotationXMatrix = this._newAxisRotationMatrix(\"x\");\n        this._rotationYMatrix = this._newAxisRotationMatrix(\"y\");\n        this._rotationZMatrix = this._newAxisRotationMatrix(\"z\");\n        this._rotationMatrix = this._createRotationMatrix();\n    }\n    get rotationMatrix() {\n        return this._rotationMatrix;\n    }\n    get rotation() {\n        return this._rotation;\n    }\n    get position() {\n        return this._position;\n    }\n    set rotation(value) {\n        const hasXChanged = this.rotation.x !== value.x;\n        const hasYChanged = this.rotation.y !== value.y;\n        const hasZChanged = this.rotation.z !== value.z;\n        this._rotation = value;\n        if (hasXChanged) this._updateAxisRotationMatrix(\"x\");\n        if (hasYChanged) this._updateAxisRotationMatrix(\"y\");\n        if (hasZChanged) this._updateAxisRotationMatrix(\"z\");\n        if (hasXChanged || hasYChanged || hasZChanged) this._rotationMatrix = this._createRotationMatrix();\n    }\n    set position(value) {\n        this._position = value;\n    }\n    _createRotationMatrix() {\n        return (0, $e50145874b2b1376$export$64ee27503e96420c)(this._rotationXMatrix, (0, $e50145874b2b1376$export$64ee27503e96420c)(this._rotationYMatrix, this._rotationZMatrix));\n    }\n    _updateAxisRotationMatrix(axis) {\n        switch(axis){\n            case \"x\":\n                this._rotationXMatrix = this._newAxisRotationMatrix(axis);\n                break;\n            case \"y\":\n                this._rotationYMatrix = this._newAxisRotationMatrix(axis);\n                break;\n            case \"z\":\n                this._rotationZMatrix = this._newAxisRotationMatrix(axis);\n                break;\n        }\n    }\n    _newAxisRotationMatrix(axis) {\n        switch(axis){\n            case \"x\":\n                return (0, $e50145874b2b1376$export$dfcaef75cdfc45e9)(this.rotation.x);\n            case \"y\":\n                return (0, $e50145874b2b1376$export$50406abad8619e0f)(this.rotation.y);\n            case \"z\":\n                return (0, $e50145874b2b1376$export$3dc04abe5d063593)(this.rotation.z);\n        }\n    }\n}\n\n\nclass $c5bdc625d24e9eb9$export$434da80b31429dcb {\n    constructor({ rotation: rotation, position: position, meshes: meshes }){\n        this._transform = new (0, $ef44e3aa01e5a5f6$export$563a914cafbdc389)({\n            rotation: rotation,\n            position: position\n        });\n        this._meshes = meshes;\n    }\n    get meshes() {\n        return this._meshes;\n    }\n    get transform() {\n        return this._transform;\n    }\n    get position() {\n        return this._transform.position;\n    }\n    get rotation() {\n        return this._transform.rotation;\n    }\n    set meshes(value) {\n        this._meshes = value;\n    }\n    set position(value) {\n        this._transform.position = value;\n    }\n    set rotation(value) {\n        this._transform.rotation = value;\n    }\n}\n\n\n\n\n//FIXME: верх почему-то -Y, скорее всего дело в том, что на канвасе отсчёт от левого верхнего угла идёт.\n//Не уверен, что это проблема вообще\nconst $38986b05f061e550$var$upDirection = new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, -1, 0);\nconst $38986b05f061e550$var$defaultCameraOptions = {\n    viewportWidth: 640,\n    viewportHeight: 480,\n    zFar: 1000,\n    zNear: 0.1,\n    fov: 75\n};\nclass $38986b05f061e550$export$79f141de891a5fed extends (0, $c5bdc625d24e9eb9$export$434da80b31429dcb) {\n    constructor({ rotation: rotation, position: position, options: options }){\n        super({\n            rotation: rotation,\n            position: position\n        });\n        this._forward = new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 1);\n        this._viewportWidth = options?.viewportWidth ?? $38986b05f061e550$var$defaultCameraOptions.viewportWidth;\n        this._viewportHeight = options?.viewportHeight ?? $38986b05f061e550$var$defaultCameraOptions.viewportHeight;\n        this._zFar = options?.zFar ?? $38986b05f061e550$var$defaultCameraOptions.zFar;\n        this._zNear = options?.zNear ?? $38986b05f061e550$var$defaultCameraOptions.zNear;\n        this._fov = options?.fov ?? $38986b05f061e550$var$defaultCameraOptions.fov;\n    }\n    get viewportWidth() {\n        return this._viewportWidth;\n    }\n    set viewportWidth(value) {\n        this._viewportWidth = value;\n    }\n    get viewportHeight() {\n        return this._viewportHeight;\n    }\n    set viewportHeight(value) {\n        this._viewportHeight = value;\n    }\n    get zFar() {\n        return this._zFar;\n    }\n    set zFar(value) {\n        this._zFar = value;\n    }\n    get zNear() {\n        return this._zNear;\n    }\n    set zNear(value) {\n        this._zNear = value;\n    }\n    set fov(value) {\n        this._fov = value;\n    }\n    get fov() {\n        return this._fov;\n    }\n    get viewportAspectRatio() {\n        return this._viewportHeight / this._viewportWidth;\n    }\n    get fovRadians() {\n        return 1 / Math.tan(this._fov * 0.5 / 180 * Math.PI);\n    }\n    setForwardDirection(lookDirection) {\n        this._forward = lookDirection;\n    }\n    get localAxis() {\n        const rotationMatrix = this.transform.rotationMatrix;\n        const lookDirection = (0, $e50145874b2b1376$export$30a0ad04fe9506e3)(this._forward, rotationMatrix);\n        const lookTarget = this.position.add(lookDirection);\n        const forward = (0, $e50145874b2b1376$export$70da8fd9d46ea007)(lookTarget.subtract(this.position));\n        const up = (0, $e50145874b2b1376$export$70da8fd9d46ea007)($38986b05f061e550$var$upDirection.subtract((0, $e50145874b2b1376$export$d0a221040ae28e0d)(forward, (0, $e50145874b2b1376$export$d269a5f7e82fc116)($38986b05f061e550$var$upDirection, forward))));\n        const right = (0, $e50145874b2b1376$export$c2244c86a719847d)(up, forward);\n        return {\n            forward: forward,\n            up: up,\n            right: right,\n            position: this.position\n        };\n    }\n    get viewMatrix() {\n        const { position: position, right: right, up: up, forward: forward } = this.localAxis;\n        return (0, $e50145874b2b1376$export$aebd08670a3acd15)((0, $e50145874b2b1376$export$c1cb189781795ee9)(position, right, up, forward));\n    }\n}\n\n\nclass $8fb8ed334a23ab51$export$7ec6a4b5441591be extends (0, $38986b05f061e550$export$79f141de891a5fed) {\n    constructor({ rotation: rotation, position: position }){\n        super({\n            rotation: rotation,\n            position: position\n        });\n    }\n}\n\n\n\n\nconst $deded05a08b16674$var$CANVAS = document.getElementById(\"canvas\");\nconst $deded05a08b16674$var$CONTEXT = $deded05a08b16674$var$CANVAS.getContext(\"2d\");\nconst $deded05a08b16674$var$camera = new (0, $8fb8ed334a23ab51$export$7ec6a4b5441591be)({\n    position: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 0),\n    rotation: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 0)\n});\nwindow.camera = $deded05a08b16674$var$camera;\nconst { viewportAspectRatio: $deded05a08b16674$var$viewportAspectRatio, fovRadians: $deded05a08b16674$var$fovRadians, zFar: $deded05a08b16674$var$zFar, zNear: $deded05a08b16674$var$zNear, viewportWidth: $deded05a08b16674$var$viewportWidth, viewportHeight: $deded05a08b16674$var$viewportHeight } = $deded05a08b16674$var$camera;\nconst $deded05a08b16674$var$projectionMatrix = (0, $e50145874b2b1376$export$3fb2efb4293ebbde)($deded05a08b16674$var$viewportAspectRatio, $deded05a08b16674$var$fovRadians, $deded05a08b16674$var$zFar, $deded05a08b16674$var$zNear);\nwindow.addEventListener(\"keypress\", (event)=>{\n    const { forward: forward, right: right, up: // position,\n    up } = $deded05a08b16674$var$camera.localAxis;\n    switch(event.code){\n        case \"KeyW\":\n            {\n                const vForward = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(forward, 0.1);\n                $deded05a08b16674$var$camera.position = $deded05a08b16674$var$camera.position.add(vForward);\n                break;\n            }\n        case \"KeyS\":\n            {\n                const vForward = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(forward, 0.1);\n                $deded05a08b16674$var$camera.position = $deded05a08b16674$var$camera.position.subtract(vForward);\n                break;\n            }\n        case \"KeyA\":\n            {\n                const vRight = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(right, -0.1);\n                $deded05a08b16674$var$camera.position = $deded05a08b16674$var$camera.position.subtract(vRight);\n                break;\n            }\n        case \"KeyD\":\n            {\n                const vRight = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(right, -0.1);\n                $deded05a08b16674$var$camera.position = $deded05a08b16674$var$camera.position.add(vRight);\n                break;\n            }\n        case \"KeyR\":\n            {\n                const vUp = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(up, -0.1);\n                $deded05a08b16674$var$camera.position = $deded05a08b16674$var$camera.position.subtract(vUp);\n                break;\n            }\n        case \"KeyF\":\n            {\n                const vUp = (0, $e50145874b2b1376$export$d0a221040ae28e0d)(up, -0.1);\n                $deded05a08b16674$var$camera.position = $deded05a08b16674$var$camera.position.add(vUp);\n                break;\n            }\n        case \"KeyQ\":\n            $deded05a08b16674$var$camera.rotation = new (0, $c9d312133f17609a$export$fe203bd8c6486855)($deded05a08b16674$var$camera.rotation.x, $deded05a08b16674$var$camera.rotation.y + 0.1, $deded05a08b16674$var$camera.rotation.z);\n            break;\n        case \"KeyE\":\n            $deded05a08b16674$var$camera.rotation = new (0, $c9d312133f17609a$export$fe203bd8c6486855)($deded05a08b16674$var$camera.rotation.x, $deded05a08b16674$var$camera.rotation.y - 0.1, $deded05a08b16674$var$camera.rotation.z);\n            break;\n        default:\n            break;\n    }\n});\nlet $deded05a08b16674$var$prevTime = 0;\nconst $deded05a08b16674$var$fpsCounter = document.getElementById(\"fps\");\n(0, $52da8439c771a3d7$export$2fa3e0ea900f8e74).loadFromUrl().then((meshes)=>{\n    const teapot = new (0, $c5bdc625d24e9eb9$export$434da80b31429dcb)({\n        rotation: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 0),\n        position: new (0, $c9d312133f17609a$export$fe203bd8c6486855)(0, 0, 6),\n        meshes: meshes\n    });\n    const testData = [\n        teapot\n    ];\n    const update = (time)=>{\n        //FIXME: добавить как дебаг функцию\n        $deded05a08b16674$var$fpsCounter.textContent = `FPS: ${(1000 / (time - $deded05a08b16674$var$prevTime)).toFixed(0)}`;\n        $deded05a08b16674$var$prevTime = time;\n        teapot.rotation.x += 0.01;\n        teapot.rotation.y += 0.01;\n        (0, $3e58c13e710daa6e$export$56b36b3cdc60a1f9).rasterize(testData, $deded05a08b16674$var$projectionMatrix, $deded05a08b16674$var$viewportWidth, $deded05a08b16674$var$viewportHeight, $deded05a08b16674$var$CONTEXT);\n        requestAnimationFrame(update);\n    };\n    requestAnimationFrame(update);\n// window.addEventListener('click', () => update(1))\n});\n\n\n//# sourceMappingURL=index.fb75d90a.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"81ar2\\\",\\\"index.fb75d90a.js\\\",\\\"73iMo\\\",\\\"cubetexture.0f1795bd.jpg\\\"]\"));","import { createProjectionMatrix, multiplyVectorByScalar } from './common/scripts'\r\nimport { Rasterizer } from './modules/Rasterizer'\r\nimport { ObjLoader } from './modules/ObjLoader'\r\nimport { FPCamera } from './components/camera/FPCamera'\r\nimport { Vector3D } from './common/Vector3D'\r\nimport { GameObject } from './components/gameObject/GameObject'\r\n\r\nconst CANVAS = document.getElementById('canvas') as HTMLCanvasElement\r\nconst CONTEXT = CANVAS.getContext('2d')\r\n\r\nconst camera = new FPCamera({\r\n    position: new Vector3D(0, 0, 0),\r\n    rotation: new Vector3D(0, 0, 0)\r\n})\r\n\r\nwindow.camera = camera\r\n\r\nconst {\r\n    viewportAspectRatio,\r\n    fovRadians,\r\n    zFar,\r\n    zNear,\r\n    viewportWidth,\r\n    viewportHeight\r\n} = camera\r\n\r\nconst projectionMatrix = createProjectionMatrix(viewportAspectRatio, fovRadians, zFar, zNear)\r\n\r\nwindow.addEventListener('keypress', (event) => {\r\n    const {\r\n        forward,\r\n        right,\r\n        // position,\r\n        up\r\n    } = camera.localAxis\r\n    switch (event.code) {\r\n    case 'KeyW': {\r\n        const vForward = multiplyVectorByScalar(forward, 0.1)\r\n        camera.position = camera.position.add(vForward)\r\n        break\r\n    }\r\n    case 'KeyS': {\r\n        const vForward = multiplyVectorByScalar(forward, 0.1)\r\n        camera.position = camera.position.subtract(vForward)\r\n        break\r\n    }\r\n    case 'KeyA': {\r\n        const vRight = multiplyVectorByScalar(right, -0.1)\r\n        camera.position = camera.position.subtract(vRight)\r\n        break\r\n    }\r\n    case 'KeyD': {\r\n        const vRight = multiplyVectorByScalar(right, -0.1)\r\n        camera.position = camera.position.add(vRight)\r\n        break\r\n    }\r\n    case 'KeyR': {\r\n        const vUp = multiplyVectorByScalar(up, -0.1)\r\n        camera.position = camera.position.subtract(vUp)\r\n        break\r\n    }\r\n    case 'KeyF': {\r\n        const vUp = multiplyVectorByScalar(up, -0.1)\r\n        camera.position = camera.position.add(vUp)\r\n        break\r\n    }\r\n    case 'KeyQ': {\r\n        camera.rotation =\r\n                new Vector3D(\r\n                    camera.rotation.x,\r\n                    camera.rotation.y + 0.1,\r\n                    camera.rotation.z\r\n                )\r\n        break\r\n    }\r\n    case 'KeyE': {\r\n        camera.rotation =\r\n                new Vector3D(\r\n                    camera.rotation.x,\r\n                    camera.rotation.y - 0.1,\r\n                    camera.rotation.z\r\n                )\r\n        break\r\n    }\r\n    default: break\r\n    }\r\n})\r\n\r\nlet prevTime = 0\r\n\r\nconst fpsCounter = document.getElementById('fps')\r\n\r\nObjLoader.loadFromUrl().then((meshes) => {\r\n    const teapot = new GameObject({\r\n        rotation: new Vector3D(0, 0, 0),\r\n        position: new Vector3D(0, 0, 6),\r\n        meshes\r\n    })\r\n\r\n    const testData = [ teapot ]\r\n\r\n    const update = (\r\n        time: number\r\n    ) => {\r\n        //FIXME: добавить как дебаг функцию\r\n        fpsCounter.textContent = `FPS: ${(1000 / (time - prevTime)).toFixed(0)}`\r\n        prevTime = time\r\n\r\n        teapot.rotation.x += 0.01\r\n        teapot.rotation.y += 0.01\r\n\r\n        Rasterizer.rasterize(testData, projectionMatrix, viewportWidth, viewportHeight, CONTEXT)\r\n\r\n        requestAnimationFrame(update)\r\n    }\r\n\r\n    requestAnimationFrame(update)\r\n\r\n    // window.addEventListener('click', () => update(1))\r\n})\r\n\r\n","import { Vector3D } from './Vector3D'\r\nimport { Matrix } from './types'\r\nimport { Triangle3D } from './Triangle3D'\r\nimport {Vector2D} from './Vector2D'\r\n\r\nexport const getLengthVector3D = (vector: Vector3D) => {\r\n    return Math.sqrt(getDotProduct3D(vector, vector))\r\n}\r\n\r\nexport const normalizeVector3D = (vector: Vector3D) => {\r\n    const length = getLengthVector3D(vector)\r\n\r\n    return new Vector3D(vector.x / length, vector.y / length, vector.z / length)\r\n}\r\n\r\nexport const getDotProduct3D = (vec1: Vector3D, vec2: Vector3D) => {\r\n    return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z\r\n}\r\n\r\nexport const getCrossProduct = (v0: Vector3D, v1: Vector3D): Vector3D => {\r\n    return new Vector3D(\r\n        v0.y * v1.z - v0.z * v1.y,\r\n        v0.z * v1.x - v0.x * v1.z,\r\n        v0.x * v1.y - v0.y * v1.x\r\n    )\r\n}\r\n\r\nexport const createIdentityMatrix = (): Matrix => {\r\n    return [\r\n        [ 1, 0, 0, 0 ],\r\n        [ 0, 1, 0, 0 ],\r\n        [ 0, 0, 1, 0 ],\r\n        [ 0, 0, 0, 1 ],\r\n    ]\r\n}\r\n\r\nexport const createRotationXMatrix = (angleRad: number): Matrix => {\r\n    return [\r\n        [ 1, 0, 0, 0 ],\r\n        [ 0, Math.cos(angleRad), Math.sin(angleRad), 0 ],\r\n        [ 0, -Math.sin(angleRad), Math.cos(angleRad), 0 ],\r\n        [ 0, 0, 0, 1 ],\r\n    ]\r\n}\r\n\r\nexport const createRotationZMatrix = (angleRad: number): Matrix => {\r\n    return [\r\n        [ Math.cos(angleRad), Math.sin(angleRad), 0, 0 ],\r\n        [ -Math.sin(angleRad), Math.cos(angleRad), 0, 0 ],\r\n        [ 0, 0, 1, 0 ],\r\n        [ 0, 0, 0, 1 ],\r\n    ]\r\n}\r\n\r\nexport const createRotationYMatrix = (angleRad: number): Matrix => {\r\n    return [\r\n        [ Math.cos(angleRad), 0, Math.sin(angleRad), 0 ],\r\n        [ 0, 1, 0, 0 ],\r\n        [ -Math.sin(angleRad), 0, Math.cos(angleRad), 0 ],\r\n        [ 0, 0, 0, 1 ],\r\n    ]\r\n}\r\n\r\nexport const createTranslationMatrix = (x: number, y: number, z: number): Matrix => {\r\n    return [\r\n        [ 1, 0, 0, 0 ],\r\n        [ 0, 1, 0, 0 ],\r\n        [ 0, 0, 1, 0 ],\r\n        [ x, y, z, 1 ],\r\n    ]\r\n}\r\n\r\nexport const createProjectionMatrix = (\r\n    aspectRatio: number,\r\n    fovRad: number,\r\n    zFar: number,\r\n    zNear: number\r\n): Matrix => {\r\n    return [\r\n        [ aspectRatio * fovRad, 0, 0, 0 ],\r\n        [ 0, fovRad, 0, 0 ],\r\n        [ 0, 0, zFar / (zFar - zNear), 1 ],\r\n        [ 0, 0, (-zFar * zNear) / (zFar - zNear), 0 ],\r\n    ]\r\n}\r\n\r\nexport const createWorldMatrix = (rotation: Vector3D, position: Vector3D) => {\r\n    const zRotationMatrix = createRotationZMatrix(rotation.z)\r\n    const xRotationMatrix = createRotationXMatrix(rotation.x)\r\n    const yRotationMatrix = createRotationYMatrix(rotation.y)\r\n    const translationMatrix = createTranslationMatrix(position.x, position.y, position.z)\r\n\r\n    //FIXME: зарефачить\r\n    return multiplyMatrixByMatrix(\r\n        multiplyMatrixByMatrix(\r\n            multiplyMatrixByMatrix(\r\n                zRotationMatrix,\r\n                xRotationMatrix\r\n            ),\r\n            yRotationMatrix\r\n        ),\r\n        translationMatrix\r\n    )\r\n}\r\n\r\nexport const multiplyVectorByMatrix = (vec3D: Vector3D, matrix: Matrix) => {\r\n    const x = vec3D.x * matrix[0][0] + vec3D.y * matrix[1][0] + vec3D.z * matrix[2][0] + vec3D.w * matrix[3][0]\r\n    const y = vec3D.x * matrix[0][1] + vec3D.y * matrix[1][1] + vec3D.z * matrix[2][1] + vec3D.w * matrix[3][1]\r\n    const z = vec3D.x * matrix[0][2] + vec3D.y * matrix[1][2] + vec3D.z * matrix[2][2] + vec3D.w * matrix[3][2]\r\n    const w = vec3D.x * matrix[0][3] + vec3D.y * matrix[1][3] + vec3D.z * matrix[2][3] + vec3D.w * matrix[3][3]\r\n\r\n    return new Vector3D(x, y, z, w)\r\n}\r\n\r\nexport const multiplyMatrixByMatrix = (m0: Matrix, m1: Matrix): Matrix => {\r\n    const matrix = [ [], [], [], [] ]\r\n\r\n    for (let c = 0; c < 4; c++) {\r\n        for (let r = 0; r < 4; r++) {\r\n            matrix[r][c] = m0[r][0] * m1[0][c] + m0[r][1] * m1[1][c] + m0[r][2] * m1[2][c] + m0[r][3] * m1[3][c]\r\n        }\r\n    }\r\n\r\n    return matrix\r\n}\r\n\r\nexport const createPointMatrix = (position: Vector3D, right: Vector3D, up: Vector3D, forward: Vector3D): Matrix => {\r\n    return [\r\n        [ right.x, right.y, right.z, 0 ],\r\n        [ up.x, up.y, up.z, 0 ],\r\n        [ forward.x,  forward.y, forward.z, 0 ],\r\n        [ position.x, position.y, position.z, 1 ],\r\n    ]\r\n}\r\n\r\nexport const hackyInvertMatrix = (m: Matrix): Matrix => { //Works only for rotation ot translation matrices\r\n    //FIXME: i have no idea why it works\r\n    return [\r\n        [ m[0][0], m[1][0], m[2][0], 0 ],\r\n        [ m[0][1], m[1][1], m[2][1], 0 ],\r\n        [ m[0][2], m[1][2], m[2][2], 0 ],\r\n        [\r\n            -(m[3][0] * m[0][0] + m[3][1] * m[0][1] + m[3][2] * m[0][2]),\r\n            -(m[3][0] * m[1][0] + m[3][1] * m[1][1] + m[3][2] * m[1][2]),\r\n            -(m[3][0] * m[2][0] + m[3][1] * m[2][1] + m[3][2] * m[2][2]),\r\n            1\r\n        ],\r\n    ]\r\n}\r\n\r\nexport const multiplyVectorByScalar = (v: Vector3D, scalar: number): Vector3D => {\r\n    return new Vector3D(v.x * scalar, v.y * scalar, v.z * scalar, v.w )\r\n}\r\n\r\nexport const intersectPlane = (planePoint: Vector3D, planeNormal: Vector3D, lineStart: Vector3D, lineEnd: Vector3D): {\r\n    vector: Vector3D,\r\n    t: number\r\n} => {\r\n    const normalizedPlaneNormal = normalizeVector3D(planeNormal)\r\n    const dPlane = -getDotProduct3D(normalizedPlaneNormal, planePoint)\r\n    const ad = getDotProduct3D(lineStart, normalizedPlaneNormal)\r\n    const bd = getDotProduct3D(lineEnd, normalizedPlaneNormal)\r\n    const t = (-dPlane - ad) / (bd - ad)\r\n    const lineStartToEnd = lineEnd.subtract(lineStart)\r\n    const lineToIntersect = multiplyVectorByScalar(lineStartToEnd, t)\r\n\r\n    return { vector: lineStart.add(lineToIntersect), t }\r\n}\r\n\r\nexport const getSignedDistanceToPlane = (vertex: Vector3D, planeNormal: Vector3D, planePoint: Vector3D) => {\r\n    return planeNormal.x * vertex.x\r\n        + planeNormal.y * vertex.y\r\n        + planeNormal.z * vertex.z\r\n        - getDotProduct3D(planeNormal, planePoint)\r\n}\r\n\r\nexport const clipTriangleAgainstPlane = (planePoint: Vector3D, planeNormal: Vector3D, triangle: Triangle3D): Triangle3D[] => {\r\n    const normalizedPlaneNormal = normalizeVector3D(planeNormal)\r\n\r\n    const insidePoints: Vector3D[] = []\r\n    const outsidePoints: Vector3D[] = []\r\n    const insideUVCoordinates: Vector2D[] = []\r\n    const outsideUVCoordinates: Vector2D[] = []\r\n\r\n    triangle.vertexes.forEach((vertex, index) => {\r\n        if (getSignedDistanceToPlane(vertex, normalizedPlaneNormal, planePoint) >= 0) {\r\n            insidePoints.push(vertex)\r\n            insideUVCoordinates.push(triangle.UVCoordinates[index])\r\n        } else {\r\n            outsidePoints.push(vertex)\r\n            outsideUVCoordinates.push(triangle.UVCoordinates[index])\r\n        }\r\n    })\r\n\r\n    switch (insidePoints.length) {\r\n    //Two sides of a triangle are clipped, create new triangle\r\n    case 1: {\r\n        const newV1 = intersectPlane(planePoint, planeNormal, insidePoints[0], outsidePoints[0])\r\n        const newV2 = intersectPlane(planePoint, planeNormal, insidePoints[0], outsidePoints[1])\r\n\r\n        const newTriangle = new Triangle3D({\r\n            vertexes: [\r\n                insidePoints[0],\r\n                newV1.vector,\r\n                newV2.vector\r\n            ],\r\n            normal: triangle.normal,\r\n            UVCoordinates: [\r\n                insideUVCoordinates[0],\r\n                new Vector2D(\r\n                    newV1.t * (outsideUVCoordinates[0].u - insideUVCoordinates[0].u) + insideUVCoordinates[0].u,\r\n                    newV1.t * (outsideUVCoordinates[0].v - insideUVCoordinates[0].v) + insideUVCoordinates[0].v,\r\n                    newV1.t * (outsideUVCoordinates[0].w - insideUVCoordinates[0].w) + insideUVCoordinates[0].w\r\n                ),\r\n                new Vector2D(\r\n                    newV2.t * (outsideUVCoordinates[1].u - insideUVCoordinates[0].u) + insideUVCoordinates[0].u,\r\n                    newV2.t * (outsideUVCoordinates[1].v - insideUVCoordinates[0].v) + insideUVCoordinates[0].v,\r\n                    newV2.t * (outsideUVCoordinates[1].w - insideUVCoordinates[0].w) + insideUVCoordinates[0].w\r\n                ),\r\n            ]\r\n        })\r\n\r\n        return [ newTriangle ]\r\n    }\r\n\r\n    //One side of a triangle is clipped, divide resulting quad into two triangles\r\n    case 2: {\r\n        const newV01 = intersectPlane(planePoint, planeNormal, insidePoints[0], outsidePoints[0])\r\n\r\n        const newV02 = intersectPlane(planePoint, planeNormal, insidePoints[1], outsidePoints[0])\r\n\r\n        const newTriangle0 = new Triangle3D({\r\n            vertexes: [\r\n                insidePoints[0],\r\n                insidePoints[1],\r\n                newV01.vector\r\n            ],\r\n            normal: triangle.normal,\r\n            UVCoordinates: [\r\n                insideUVCoordinates[0],\r\n                insideUVCoordinates[1],\r\n                new Vector2D(\r\n                    newV01.t * (outsideUVCoordinates[0].u - insideUVCoordinates[0].u) + insideUVCoordinates[0].u,\r\n                    newV01.t * (outsideUVCoordinates[0].v - insideUVCoordinates[0].v) + insideUVCoordinates[0].v,\r\n                    newV01.t * (outsideUVCoordinates[0].w - insideUVCoordinates[0].w) + insideUVCoordinates[0].w\r\n                ),\r\n            ]\r\n        })\r\n\r\n        const newTriangle1 = new Triangle3D({\r\n            vertexes: [\r\n                insidePoints[1],\r\n                newTriangle0.vertexes[2],\r\n                newV02.vector\r\n            ],\r\n            normal: triangle.normal,\r\n            UVCoordinates: [\r\n                insideUVCoordinates[1],\r\n                newTriangle0.UVCoordinates[2],\r\n                new Vector2D(\r\n                    newV02.t * (outsideUVCoordinates[0].u - insideUVCoordinates[1].u) + insideUVCoordinates[1].u,\r\n                    newV02.t * (outsideUVCoordinates[0].v - insideUVCoordinates[1].v) + insideUVCoordinates[1].v,\r\n                    newV02.t * (outsideUVCoordinates[0].w - insideUVCoordinates[1].w) + insideUVCoordinates[1].w\r\n                ),\r\n            ]\r\n        })\r\n\r\n        return [ newTriangle0, newTriangle1 ]\r\n    }\r\n    // Triangle doesnt need clipping\r\n    case 3: {\r\n        return [ triangle ]\r\n    }\r\n    // Triangle is completely clipped\r\n    default: {\r\n        return []\r\n    }\r\n    }\r\n}\r\n\r\nexport const getPixelData = (textureData: ImageData, u: number, v: number) => {\r\n    const { width, height } = textureData\r\n\r\n    //convert texture space coordinates to indexes\r\n    const x = Math.round(v * width)\r\n    const y = Math.round(u * height)\r\n\r\n    return [\r\n        textureData.data[y * (textureData.width * 4) + x * 4],\r\n        textureData.data[y * (textureData.width * 4) + x * 4 + 1],\r\n        textureData.data[y * (textureData.width * 4) + x * 4 + 2],\r\n        textureData.data[y * (textureData.width * 4) + x * 4 + 3]\r\n    ]\r\n\r\n}\r\n","export class Vector3D {\r\n    x: number\r\n    y: number\r\n    z: number\r\n    w: number\r\n\r\n    constructor(x: number, y: number, z: number, w = 1) {\r\n        this.x = x\r\n        this.y = y\r\n        this.z = z\r\n        this.w = w\r\n    }\r\n\r\n    add(otherVec: Vector3D): Vector3D {\r\n        return new Vector3D(\r\n            this.x + otherVec.x,\r\n            this.y + otherVec.y,\r\n            this.z + otherVec.z,\r\n            this.w\r\n        )\r\n    }\r\n\r\n    subtract(otherVec: Vector3D): Vector3D {\r\n        return new Vector3D(\r\n            this.x - otherVec.x,\r\n            this.y - otherVec.y,\r\n            this.z - otherVec.z,\r\n            this.w\r\n        )\r\n    }\r\n}\r\n","import { Vector3D } from './Vector3D'\r\nimport { Matrix } from './types'\r\nimport { multiplyVectorByMatrix, multiplyVectorByScalar } from './scripts'\r\nimport { Vector2D } from './Vector2D'\r\n\r\nconst placeholderUVCoords = [\r\n    new Vector2D(0, 0),\r\n    new Vector2D(0, 0),\r\n    new Vector2D(0, 0)\r\n]\r\n\r\nexport class Triangle3D {\r\n    private _vertexes: Vector3D[]\r\n    private _UVCoordinates: Vector2D[]\r\n    normal?: Vector3D\r\n\r\n    constructor({\r\n        vertexes,\r\n        UVCoordinates = placeholderUVCoords,\r\n        normal = undefined\r\n    } : { vertexes: Vector3D[], UVCoordinates: Vector2D[], normal?: Vector3D }) {\r\n        this._vertexes = vertexes\r\n        this._UVCoordinates = UVCoordinates\r\n        this.normal = normal\r\n    }\r\n\r\n    applyMatrixMut(matrix: Matrix): Triangle3D {\r\n        this.vertexes[0] = multiplyVectorByMatrix(this.vertexes[0], matrix),\r\n        this.vertexes[1] = multiplyVectorByMatrix(this.vertexes[1], matrix),\r\n        this.vertexes[2] = multiplyVectorByMatrix(this.vertexes[2], matrix)\r\n\r\n        return this\r\n    }\r\n\r\n    normalizeInScreenSpaceMut(screenWidth: number, screenHeight: number): Triangle3D {\r\n        //account for perspective\r\n        this.UVCoordinates[0].u = this.UVCoordinates[0].u / this.vertexes[0].w\r\n        this.UVCoordinates[0].v = this.UVCoordinates[0].v / this.vertexes[0].w\r\n        this.UVCoordinates[0].w = 1 / this.vertexes[0].w\r\n\r\n        this.UVCoordinates[1].u = this.UVCoordinates[1].u / this.vertexes[1].w\r\n        this.UVCoordinates[1].v = this.UVCoordinates[1].v / this.vertexes[1].w\r\n        this.UVCoordinates[1].w = 1 / this.vertexes[1].w\r\n\r\n        this.UVCoordinates[2].u = this.UVCoordinates[2].u / this.vertexes[2].w\r\n        this.UVCoordinates[2].v = this.UVCoordinates[2].v / this.vertexes[2].w\r\n        this.UVCoordinates[2].w = 1 / this.vertexes[2].w\r\n\r\n        this.vertexes[0] = multiplyVectorByScalar(this.vertexes[0], 1 / this.vertexes[0].w)\r\n        this.vertexes[1] = multiplyVectorByScalar(this.vertexes[1], 1 / this.vertexes[1].w)\r\n        this.vertexes[2] = multiplyVectorByScalar(this.vertexes[2], 1 / this.vertexes[2].w)\r\n\r\n        this.vertexes[0] = multiplyVectorByScalar(this.vertexes[0], -1)\r\n        this.vertexes[1] = multiplyVectorByScalar(this.vertexes[1], -1)\r\n        this.vertexes[2] = multiplyVectorByScalar(this.vertexes[2], -1)\r\n\r\n        this.vertexes[0].x = (this.vertexes[0].x + 1) * 0.5 * screenWidth\r\n        this.vertexes[0].y = (this.vertexes[0].y + 1) * 0.5 * screenHeight\r\n        this.vertexes[1].x = (this.vertexes[1].x + 1) * 0.5 * screenWidth\r\n        this.vertexes[1].y = (this.vertexes[1].y + 1) * 0.5 * screenHeight\r\n        this.vertexes[2].x = (this.vertexes[2].x + 1) * 0.5 * screenWidth\r\n        this.vertexes[2].y = (this.vertexes[2].y + 1) * 0.5 * screenHeight\r\n\r\n        return this\r\n    }\r\n\r\n    getVertexCopies() {\r\n        return this._vertexes.map((vertex) => {\r\n            return new Vector3D(vertex.x, vertex.y, vertex.z, vertex.w)\r\n        })\r\n    }\r\n\r\n    getUVCoordinatesCopies() {\r\n        return this._UVCoordinates.map((vec) => {\r\n            return new Vector2D(vec.u, vec.v, vec.w)\r\n        })\r\n    }\r\n\r\n    getNormalCopy() {\r\n        if (this.normal) {\r\n            return new Vector3D(this.normal.x, this.normal.y, this.normal.z, this.normal.w)\r\n        } else {\r\n            return undefined\r\n        }\r\n\r\n    }\r\n\r\n    getCopy() {\r\n        return new Triangle3D({\r\n            vertexes: this.getVertexCopies(),\r\n            UVCoordinates: this.getUVCoordinatesCopies(),\r\n            normal: this.getNormalCopy()\r\n        })\r\n    }\r\n\r\n    get vertexes() {\r\n        return this._vertexes\r\n    }\r\n\r\n    get UVCoordinates() {\r\n        return this._UVCoordinates\r\n    }\r\n\r\n    set vertexes(value) {\r\n        this._vertexes = value\r\n    }\r\n\r\n    set UVCoordinates(value: Vector2D[]) {\r\n        this._UVCoordinates = value\r\n    }\r\n}\r\n","export class Vector2D {\r\n    u: number\r\n    v: number\r\n    w: number\r\n    \r\n    constructor(u: number, v: number, w: number = 1) {\r\n        this.u = u\r\n        this.v = v\r\n        this.w = w\r\n    }\r\n}\r\n","import { Vector3D } from '../common/Vector3D'\r\nimport { Matrix } from '../common/types'\r\nimport { Triangle3D } from '../common/Triangle3D'\r\nimport {\r\n    clipTriangleAgainstPlane,\r\n    createWorldMatrix,\r\n    getCrossProduct,\r\n    getDotProduct3D, getPixelData,\r\n    normalizeVector3D\r\n} from '../common/scripts'\r\nimport { Camera } from '../components/camera/Camera'\r\nimport { GameObject } from '../components/gameObject/GameObject'\r\n\r\nexport class Rasterizer {\r\n    static rasterize(\r\n        data: GameObject[],\r\n        projectionMatrix: Matrix,\r\n        sWidth: number,\r\n        sHeight: number,\r\n        context: CanvasRenderingContext2D,\r\n    ) {\r\n        //FIXME: плейсхолдер\r\n        const camera: Camera = window.camera as Camera\r\n\r\n        const clippingPlanes = [\r\n            { point: new Vector3D(0, 0, 0), normal: new Vector3D(0, 1, 0) },\r\n            { point: new Vector3D(0, camera.viewportHeight - 1, 0), normal: new Vector3D(0, -1, 0) },\r\n            { point: new Vector3D(0, 0, 0), normal: new Vector3D(1, 0, 0) },\r\n            { point: new Vector3D(camera.viewportWidth - 1, 0, 0), normal: new Vector3D(-1, 0, 0) }\r\n        ]\r\n\r\n        data.forEach((gameObject) => {\r\n            const worldMatrix = createWorldMatrix(gameObject.rotation, gameObject.position)\r\n            const imageData = context.createImageData(context.canvas.width, context.canvas.height)\r\n\r\n            gameObject.meshes?.forEach((mesh) => {\r\n                const viewMatrix = camera.viewMatrix\r\n\r\n                const clippedTriangles = mesh.triangles.reduce((res, triangle) => {\r\n                    const translatedTriangle = triangle.getCopy()\r\n\r\n                    translatedTriangle.applyMatrixMut(worldMatrix)\r\n\r\n                    const line1 = translatedTriangle.vertexes[1].subtract(translatedTriangle.vertexes[0])\r\n                    const line2 = translatedTriangle.vertexes[2].subtract(translatedTriangle.vertexes[0])\r\n\r\n                    const normal = normalizeVector3D(getCrossProduct(line1, line2))\r\n\r\n                    const cameraDotProduct = getDotProduct3D(\r\n                        normal,\r\n                        translatedTriangle.vertexes[0].subtract(camera.position)\r\n                    )\r\n\r\n                    if (cameraDotProduct >= 0 || isNaN(cameraDotProduct)) {\r\n                        return res\r\n                    }\r\n\r\n                    translatedTriangle.applyMatrixMut(viewMatrix)\r\n\r\n                    //Clip triangle against near plane\r\n                    const clippedTriangles = clipTriangleAgainstPlane(\r\n                        new Vector3D(0, 0, camera.zNear),\r\n                        new Vector3D(0, 0, 1),\r\n                        translatedTriangle\r\n                    ).map((triangle) => {\r\n                        triangle.normal = normal\r\n\r\n                        return triangle\r\n                            .applyMatrixMut(projectionMatrix)\r\n                            .normalizeInScreenSpaceMut(sWidth, sHeight)\r\n                    }, [] as Triangle3D[])\r\n\r\n                    return [ ...res, ...clippedTriangles ]\r\n                }, [] as Triangle3D[])\r\n                //FIXME: нужно все треугольники в сцене сортировать, а не в меше\r\n                    .sort((t0, t1) => {\r\n                        const averageZ0 = (t0.vertexes[0].z + t0.vertexes[1].z + t0.vertexes[2].z) / 3\r\n                        const averageZ1 = (t1.vertexes[0].z + t1.vertexes[1].z + t1.vertexes[2].z) / 3\r\n\r\n                        return averageZ1 - averageZ0\r\n                    })\r\n\r\n                let screenSpaceClippedTriangles: Triangle3D[] = clippedTriangles\r\n\r\n                clippingPlanes.forEach(({ point, normal }) => {\r\n                    screenSpaceClippedTriangles = screenSpaceClippedTriangles.reduce((res, triangle) => {\r\n                        return [ ...res, ...clipTriangleAgainstPlane(\r\n                            point,\r\n                            normal,\r\n                            triangle\r\n                        ) ]\r\n                    }, [] as Triangle3D[])\r\n                })\r\n\r\n                screenSpaceClippedTriangles.forEach((triangle) => {\r\n                    this._generateTriangleData(triangle, imageData, mesh.texture)\r\n                })\r\n            })\r\n\r\n            context.putImageData(imageData, 0, 0)\r\n        })\r\n    }\r\n\r\n    private static _setPixelData(value: [number, number, number, number], x: number, y: number, imageData: ImageData) {\r\n        imageData.data[y * (imageData.width * 4) + x * 4] = value[0]\r\n        imageData.data[y * (imageData.width * 4) + x * 4 + 1] = value[1]\r\n        imageData.data[y * (imageData.width * 4) + x * 4 + 2] = value[2]\r\n        imageData.data[y * (imageData.width * 4) + x * 4 + 3] = value[3]\r\n    }\r\n\r\n    private static _generateTriangleData(triangle: Triangle3D, imageData: ImageData, textureData?: ImageData) {\r\n        //FIXME: потереть когда будет освещение\r\n        const lightPlaceholder = new Vector3D(0, 0, -1)\r\n        const normalizedLightVector = normalizeVector3D(lightPlaceholder)\r\n\r\n        const { normal } = triangle\r\n        let colorCoefficient = 1\r\n\r\n        if (normal) {\r\n            colorCoefficient = Math.max(getDotProduct3D(normalizedLightVector, normal), 0.3)\r\n        }\r\n\r\n        const vertData = [\r\n            {\r\n                x: triangle.vertexes[0].x,\r\n                y: triangle.vertexes[0].y,\r\n                u: triangle.UVCoordinates[0].u,\r\n                v: triangle.UVCoordinates[0].v,\r\n                w: triangle.UVCoordinates[0].w\r\n            },\r\n            {\r\n                x: triangle.vertexes[1].x,\r\n                y: triangle.vertexes[1].y,\r\n                u: triangle.UVCoordinates[1].u,\r\n                v: triangle.UVCoordinates[1].v,\r\n                w: triangle.UVCoordinates[1].w\r\n            },\r\n            {\r\n                x: triangle.vertexes[2].x,\r\n                y: triangle.vertexes[2].y,\r\n                u: triangle.UVCoordinates[2].u,\r\n                v: triangle.UVCoordinates[2].v,\r\n                w: triangle.UVCoordinates[2].w\r\n            }\r\n        ].sort((a, b) => a.y - b.y)\r\n\r\n        let dy1 = vertData[1].y - vertData[0].y\r\n        let dx1 = vertData[1].x - vertData[0].x\r\n        let dv1 = vertData[1].v - vertData[0].v\r\n        let du1 = vertData[1].u - vertData[0].u\r\n        let dw1 = vertData[1].w - vertData[0].w\r\n\r\n        const dy2 = vertData[2].y - vertData[0].y\r\n        const dx2 = vertData[2].x - vertData[0].x\r\n        const dv2 = vertData[2].v - vertData[0].v\r\n        const du2 = vertData[2].u - vertData[0].u\r\n        const dw2 = vertData[2].w - vertData[0].w\r\n\r\n        let xStep1 = 0,\r\n            xStep2 = 0,\r\n            u1Step = 0,\r\n            v1Step = 0,\r\n            u2Step = 0,\r\n            v2Step = 0,\r\n            w1Step = 0,\r\n            w2Step = 0\r\n\r\n        if (dy1) xStep1 = dx1 / Math.abs(dy1)\r\n        if (dy2) xStep2 = dx2 / Math.abs(dy2)\r\n\r\n        if (dy1) u1Step = du1 / Math.abs(dy1)\r\n        if (dy1) v1Step = dv1 / Math.abs(dy1)\r\n        if (dy1) w1Step = dw1 / Math.abs(dy1)\r\n\r\n        if (dy2) u2Step = du2 / Math.abs(dy2)\r\n        if (dy2) v2Step = dv2 / Math.abs(dy2)\r\n        if (dy2) w2Step = dw2 / Math.abs(dy2)\r\n\r\n        if (dy1) {\r\n            for (let i = vertData[0].y; i <= vertData[1].y; i++) {\r\n\r\n                let aX = vertData[0].x + (i - vertData[0].y) * xStep1\r\n                let bX = vertData[0].x + (i - vertData[0].y) * xStep2\r\n\r\n                let textureU = 0,\r\n                    textureV = 0,\r\n                    textureW = 0\r\n\r\n                //starting values\r\n                let sU = vertData[0].u + (i - vertData[0].y) * u1Step\r\n                let sV = vertData[0].v + (i - vertData[0].y) * v1Step\r\n                let sW = vertData[0].w + (i - vertData[0].y) * w1Step\r\n\r\n                //ending values\r\n                let eU = vertData[0].u + (i - vertData[0].y) * u2Step\r\n                let eV = vertData[0].v + (i - vertData[0].y) * v2Step\r\n                let eW = vertData[0].w + (i - vertData[0].y) * w2Step\r\n\r\n                if (aX > bX) {\r\n                    [ aX, bX ] = [ bX, aX ];\r\n                    [ sU, eU ] = [ eU, sU ];\r\n                    [ sV, eV ] = [ eV, sV ];\r\n                    [ sW, eW ] = [ eW, sW ]\r\n                }\r\n\r\n                let t = 0\r\n                const tStep = 1 / (bX - aX)\r\n\r\n                textureU = sU\r\n                textureV = sV\r\n                textureW = sW\r\n\r\n                for (let j = aX; j < bX; j++) {\r\n                    //interpolated texture space values\r\n                    textureU = (1 - t) * sU + t * eU\r\n                    textureV = (1 - t) * sV + t * eV\r\n                    textureW = (1 - t) * sW + t * eW\r\n\r\n                    const texturePixelData = textureData\r\n                        ? getPixelData(\r\n                            textureData,\r\n                            textureU / textureW,\r\n                            textureV / textureW\r\n                        )\r\n                        : [ 255, 255, 255, 255 ]\r\n\r\n                    this._setPixelData(\r\n                        [\r\n                            texturePixelData[0] * colorCoefficient,\r\n                            texturePixelData[1] * colorCoefficient,\r\n                            texturePixelData[2] * colorCoefficient,\r\n                            texturePixelData[3]\r\n                        ],\r\n                        Math.round(j),\r\n                        Math.round(i),\r\n                        imageData\r\n                    )\r\n\r\n                    t += tStep\r\n                }\r\n            }\r\n        }\r\n\r\n        dy1 = vertData[2].y - vertData[1].y\r\n        dx1 = vertData[2].x - vertData[1].x\r\n        dv1 = vertData[2].v - vertData[1].v\r\n        du1 = vertData[2].u - vertData[1].u\r\n        dw1 = vertData[2].w - vertData[1].w\r\n\r\n\r\n        if (dy1) xStep1 = dx1 / Math.abs(dy1)\r\n        if (dy2) xStep2 = dx2 / Math.abs(dy2)\r\n\r\n        u1Step = 0\r\n        v1Step = 0\r\n\r\n        if (dy1) u1Step = du1 / Math.abs(dy1)\r\n        if (dy1) v1Step = dv1 / Math.abs(dy1)\r\n        if (dy1) w1Step = dw1 / Math.abs(dy1)\r\n\r\n        if (dy1) {\r\n            for (let i = vertData[1].y; i <= vertData[2].y; i++) {\r\n                let aX = vertData[1].x + (i - vertData[1].y) * xStep1\r\n                let bX = vertData[0].x + (i - vertData[0].y) * xStep2\r\n\r\n                let textureU = 0,\r\n                    textureV = 0,\r\n                    textureW = 0\r\n\r\n                //starting values\r\n                let sU = vertData[1].u + (i - vertData[1].y) * u1Step\r\n                let sV = vertData[1].v + (i - vertData[1].y) * v1Step\r\n                let sW = vertData[1].w + (i - vertData[1].y) * w1Step\r\n\r\n                //ending values\r\n                let eU = vertData[0].u + (i - vertData[0].y) * u2Step\r\n                let eV = vertData[0].v + (i - vertData[0].y) * v2Step\r\n                let eW = vertData[0].w + (i - vertData[0].y) * w2Step\r\n\r\n                if (aX > bX) {\r\n                    [ aX, bX ] = [ bX, aX ];\r\n                    [ sU, eU ] = [ eU, sU ];\r\n                    [ sV, eV ] = [ eV, sV ];\r\n                    [ sW, eW ] = [ eW, sW ]\r\n                }\r\n\r\n                textureU = sU\r\n                textureV = sV\r\n                textureW = sW\r\n\r\n                const tStep = 1 / (bX - aX)\r\n                let t = 0\r\n\r\n                for (let j = aX; j < bX; j++) {\r\n                    textureU = (1 - t) * sU + t * eU\r\n                    textureV = (1 - t) * sV + t * eV\r\n                    textureW = (1 - t) * sW + t * eW\r\n\r\n                    const texturePixelData = textureData\r\n                        ? getPixelData(\r\n                            textureData,\r\n                            textureU / textureW,\r\n                            textureV / textureW\r\n                        )\r\n                        : [ 255, 255, 255, 255 ]\r\n\r\n                    this._setPixelData(\r\n                        [\r\n                            texturePixelData[0] * colorCoefficient,\r\n                            texturePixelData[1] * colorCoefficient,\r\n                            texturePixelData[2] * colorCoefficient,\r\n                            texturePixelData[3]\r\n                        ],\r\n                        Math.round(j),\r\n                        Math.round(i),\r\n                        imageData\r\n                    )\r\n\r\n                    t += tStep\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import testModel from 'bundle-text:../texturedCube.obj'\r\nimport { Vector3D } from '../common/Vector3D'\r\nimport { Triangle3D } from '../common/Triangle3D'\r\nimport { Mesh } from '../common/Mesh'\r\nimport { Vector2D } from '../common/Vector2D'\r\nimport testTexture from '../cubetexture.jpg'\r\n\r\nexport class ObjLoader {\r\n    private static async _loadTextureData() {\r\n        const response = await fetch(testTexture)\r\n        const fileBlob = await response.blob()\r\n        const bitmap = await createImageBitmap(fileBlob)\r\n        const offScreenCanvas = document.createElement('canvas')\r\n        const offScreenCanvasContext = offScreenCanvas.getContext('2d')\r\n        offScreenCanvas.width = bitmap.width\r\n        offScreenCanvas.height = bitmap.height\r\n        offScreenCanvasContext.drawImage(bitmap, 0, 0 )\r\n\r\n        return offScreenCanvasContext.getImageData(0, 0, offScreenCanvas.width, offScreenCanvas.height)\r\n    }\r\n\r\n    //FIXME: сделать загрузку по урлу\r\n    static async loadFromUrl () {\r\n        const data = testModel.split('\\n')\r\n\r\n        const vertexes: Vector3D[] = []\r\n\r\n        //FIXME: a bit of a hack\r\n        const rawData: { triangles: Triangle3D[] }[] = [ {triangles: []} ]\r\n\r\n        const UVCoordinates: Vector2D[] = []\r\n        let textureData: ImageData | undefined  = undefined\r\n\r\n        let current = 0\r\n\r\n        data.forEach((line) => {\r\n            if (line[0] === 'o') {\r\n                current++\r\n                rawData[current] = { triangles: [] }\r\n            }\r\n\r\n            if (line[0] === 'v') {\r\n                if (line[1] === 't') {\r\n                    const data = line.split(' ')\r\n                    UVCoordinates.push(new Vector2D(Number(data[1]), Number(data[2])))\r\n                } else {\r\n                    const data = line.split(' ')\r\n                    vertexes.push(new Vector3D(Number(data[1]), Number(data[2]), Number(data[3])))\r\n                }\r\n            }\r\n        })\r\n\r\n        data.forEach((line) => {\r\n            if (line[0] === 'f') {\r\n                if (UVCoordinates.length === 0) {\r\n                    const data = line.split(' ')\r\n                    rawData[current].triangles.push(new Triangle3D({\r\n                        vertexes: [\r\n                            vertexes[data[1] - 1],\r\n                            vertexes[data[2] - 1],\r\n                            vertexes[data[3] - 1],\r\n                        ],\r\n                        UVCoordinates: [\r\n                            new Vector2D(0, 0),\r\n                            new Vector2D(0, 0),\r\n                            new Vector2D(0, 0)\r\n                        ]\r\n                    }))\r\n                } else {\r\n                    const data = line.split(' ').map((el) => {\r\n                        return el.split('/')\r\n                    })\r\n\r\n                    rawData[current].triangles.push(new Triangle3D({\r\n                        vertexes: [\r\n                            vertexes[data[1][0] - 1],\r\n                            vertexes[data[2][0] - 1],\r\n                            vertexes[data[3][0] - 1],\r\n                        ],\r\n                        UVCoordinates: [\r\n                            UVCoordinates[data[1][1] - 1],\r\n                            UVCoordinates[data[2][1] - 1],\r\n                            UVCoordinates[data[3][1] - 1],\r\n                        ]\r\n                    }))\r\n                }\r\n            }\r\n        })\r\n\r\n        if (UVCoordinates.length !== 0) {\r\n            textureData = await this._loadTextureData()\r\n        }\r\n\r\n        return rawData.map((data) => {\r\n            return new Mesh(data.triangles, textureData)\r\n        })\r\n    }\r\n}\r\n","module.exports = \"463c3294029fca20\";","import { Triangle3D } from './Triangle3D'\r\n\r\nexport class Mesh {\r\n    private _triangles: Triangle3D[]\r\n    private _texture?: ImageData\r\n\r\n    constructor(triangles: Triangle3D[], texture?: ImageData) {\r\n        this._triangles = triangles\r\n        this._texture = texture\r\n    }\r\n\r\n    get triangles() {\r\n        return this._triangles\r\n    }\r\n\r\n    set triangles(value) {\r\n        this._triangles = value\r\n    }\r\n\r\n    get texture() {\r\n        return this._texture\r\n    }\r\n\r\n    set texture(value) {\r\n        this._texture = value\r\n    }\r\n}\r\n","module.exports = new __parcel__URL__(\"cubetexture.0f1795bd.jpg\").toString();","import { Camera } from './Camera'\nimport { FPCameraProps } from '../../common/types'\n\nexport class FPCamera extends Camera {\n    constructor({ rotation, position }: FPCameraProps) {\n        super({ rotation, position })\n    }\n}\n","import { CameraOptions, CameraProps } from '../../common/types'\r\nimport { GameObject } from '../gameObject/GameObject'\r\nimport { Vector3D } from '../../common/Vector3D'\r\nimport {\r\n    createPointMatrix,\r\n    getCrossProduct,\r\n    getDotProduct3D, hackyInvertMatrix,\r\n    multiplyVectorByMatrix,\r\n    multiplyVectorByScalar,\r\n    normalizeVector3D\r\n} from '../../common/scripts'\r\n\r\n//FIXME: верх почему-то -Y, скорее всего дело в том, что на канвасе отсчёт от левого верхнего угла идёт.\r\n//Не уверен, что это проблема вообще\r\nconst upDirection = new Vector3D(0, -1, 0)\r\n\r\nconst defaultCameraOptions = {\r\n    viewportWidth: 640,\r\n    viewportHeight: 480,\r\n    zFar: 1000,\r\n    zNear: 0.1,\r\n    fov: 75\r\n}\r\n\r\ntype RequiredCameraOptions = Required<CameraOptions>\r\n\r\nexport class Camera extends GameObject {\r\n    private _forward: Vector3D\r\n    private _viewportWidth: RequiredCameraOptions['viewportWidth']\r\n    private _viewportHeight: RequiredCameraOptions['viewportHeight']\r\n    private _zFar: RequiredCameraOptions['zFar']\r\n    private _zNear: RequiredCameraOptions['zNear']\r\n    private _fov: RequiredCameraOptions['fov']\r\n\r\n    constructor({ rotation, position, options }: CameraProps) {\r\n        super({ rotation, position })\r\n\r\n        this._forward = new Vector3D(0, 0, 1)\r\n        this._viewportWidth = options?.viewportWidth ?? defaultCameraOptions.viewportWidth\r\n        this._viewportHeight = options?.viewportHeight ?? defaultCameraOptions.viewportHeight\r\n        this._zFar = options?.zFar ?? defaultCameraOptions.zFar\r\n        this._zNear = options?.zNear ?? defaultCameraOptions.zNear\r\n        this._fov = options?.fov ?? defaultCameraOptions.fov\r\n    }\r\n\r\n    public get viewportWidth() {\r\n        return this._viewportWidth\r\n    }\r\n\r\n    public set viewportWidth(value: RequiredCameraOptions['viewportWidth']) {\r\n        this._viewportWidth = value\r\n    }\r\n\r\n    public get viewportHeight() {\r\n        return this._viewportHeight\r\n    }\r\n\r\n    public set viewportHeight(value: RequiredCameraOptions['viewportHeight']) {\r\n        this._viewportHeight = value\r\n    }\r\n\r\n    public get zFar() {\r\n        return this._zFar\r\n    }\r\n\r\n    public set zFar(value: RequiredCameraOptions['zFar']) {\r\n        this._zFar = value\r\n    }\r\n\r\n    public get zNear() {\r\n        return this._zNear\r\n    }\r\n\r\n    public set zNear(value: RequiredCameraOptions['zNear']) {\r\n        this._zNear = value\r\n    }\r\n\r\n    public set fov(value: RequiredCameraOptions['fov']) {\r\n        this._fov = value\r\n    }\r\n\r\n    public get fov() {\r\n        return this._fov\r\n    }\r\n\r\n    public get viewportAspectRatio() {\r\n        return this._viewportHeight / this._viewportWidth\r\n    }\r\n\r\n    public get fovRadians() {\r\n        return 1 / Math.tan(this._fov * 0.5 / 180 * Math.PI)\r\n    }\r\n\r\n    public setForwardDirection(lookDirection: Vector3D) {\r\n        this._forward = lookDirection\r\n    }\r\n\r\n    public get localAxis(): { forward: Vector3D, right: Vector3D, up: Vector3D, position: Vector3D } {\r\n        const rotationMatrix = this.transform.rotationMatrix\r\n\r\n        const lookDirection = multiplyVectorByMatrix(this._forward, rotationMatrix)\r\n\r\n        const lookTarget = this.position.add(lookDirection)\r\n\r\n        const forward = normalizeVector3D(lookTarget.subtract(this.position))\r\n        const up = normalizeVector3D(\r\n            upDirection.subtract(\r\n                multiplyVectorByScalar(\r\n                    forward,\r\n                    getDotProduct3D(upDirection, forward)\r\n                )\r\n            )\r\n        )\r\n\r\n        const right = getCrossProduct(up, forward)\r\n\r\n        return { forward, up, right, position: this.position }\r\n    }\r\n\r\n    public get viewMatrix() {\r\n        const { position, right, up, forward } = this.localAxis\r\n\r\n        return hackyInvertMatrix(\r\n            createPointMatrix(position, right, up, forward)\r\n        )\r\n    }\r\n}\r\n","import { Transform } from '../transform/Transform'\r\nimport { GameObjectProps } from '../../common/types'\r\nimport { Mesh } from '../../common/Mesh'\r\n\r\nexport class GameObject {\r\n    readonly _transform: Transform\r\n    private _meshes?: Mesh[] | null\r\n\r\n    constructor({ rotation, position, meshes }: GameObjectProps) {\r\n        this._transform = new Transform({ rotation, position })\r\n        this._meshes = meshes\r\n    }\r\n\r\n    get meshes() {\r\n        return this._meshes\r\n    }\r\n\r\n    get transform() {\r\n        return this._transform\r\n    }\r\n\r\n    get position() {\r\n        return this._transform.position\r\n    }\r\n\r\n    get rotation() {\r\n        return this._transform.rotation\r\n    }\r\n\r\n    set meshes(value) {\r\n        this._meshes = value\r\n    }\r\n\r\n    set position(value) {\r\n        this._transform.position = value\r\n    }\r\n\r\n    set rotation(value) {\r\n        this._transform.rotation = value\r\n    }\r\n}\r\n","import { Vector3D } from '../../common/Vector3D'\r\nimport { Matrix, TransformProps } from '../../common/types'\r\nimport {\r\n    createRotationXMatrix,\r\n    createRotationYMatrix,\r\n    createRotationZMatrix, multiplyMatrixByMatrix\r\n} from '../../common/scripts'\r\n\r\nexport class Transform {\r\n    protected _rotationXMatrix: Matrix\r\n    protected _rotationYMatrix: Matrix\r\n    protected _rotationZMatrix: Matrix\r\n    protected _rotationMatrix: Matrix\r\n    private _rotation: Vector3D\r\n    private _position: Vector3D\r\n\r\n    constructor({ rotation, position }: TransformProps) {\r\n        this._rotation = rotation\r\n        this._position = position\r\n        this._rotationXMatrix = this._newAxisRotationMatrix('x')\r\n        this._rotationYMatrix = this._newAxisRotationMatrix('y')\r\n        this._rotationZMatrix = this._newAxisRotationMatrix('z')\r\n        this._rotationMatrix = this._createRotationMatrix()\r\n    }\r\n\r\n    get rotationMatrix() {\r\n        return this._rotationMatrix\r\n    }\r\n\r\n    get rotation() {\r\n        return this._rotation\r\n    }\r\n\r\n    get position() {\r\n        return this._position\r\n    }\r\n\r\n    set rotation(value: Vector3D) {\r\n        const hasXChanged = this.rotation.x !== value.x\r\n        const hasYChanged = this.rotation.y !== value.y\r\n        const hasZChanged = this.rotation.z !== value.z\r\n\r\n        this._rotation = value\r\n\r\n        if (hasXChanged) this._updateAxisRotationMatrix('x')\r\n        if (hasYChanged) this._updateAxisRotationMatrix('y')\r\n        if (hasZChanged) this._updateAxisRotationMatrix('z')\r\n\r\n        if (hasXChanged || hasYChanged || hasZChanged) {\r\n            this._rotationMatrix = this._createRotationMatrix()\r\n        }\r\n    }\r\n\r\n    set position(value: Vector3D) {\r\n        this._position = value\r\n    }\r\n\r\n    private _createRotationMatrix() {\r\n        return multiplyMatrixByMatrix(\r\n            this._rotationXMatrix,\r\n            multiplyMatrixByMatrix(\r\n                this._rotationYMatrix,\r\n                this._rotationZMatrix\r\n            )\r\n        )\r\n    }\r\n\r\n    private _updateAxisRotationMatrix(axis: 'x' | 'y' | 'z') {\r\n        switch (axis) {\r\n        case 'x': this._rotationXMatrix = this._newAxisRotationMatrix(axis);break\r\n        case 'y': this._rotationYMatrix = this._newAxisRotationMatrix(axis);break\r\n        case 'z': this._rotationZMatrix = this._newAxisRotationMatrix(axis);break\r\n        }\r\n    }\r\n\r\n    private _newAxisRotationMatrix(axis: 'x' | 'y' | 'z') {\r\n        switch (axis) {\r\n        case 'x': return createRotationXMatrix(this.rotation.x)\r\n        case 'y': return createRotationYMatrix(this.rotation.y)\r\n        case 'z': return createRotationZMatrix(this.rotation.z)\r\n        }\r\n    }\r\n}\r\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$f178beb905667278$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$f178beb905667278$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$c9d312133f17609a$export$fe203bd8c6486855","constructor","x","y","z","w","add","otherVec","subtract","$25d05852a3fefe63$export$f6b39f5a8a6533a5","u","$04f3dddf70873dfc$var$placeholderUVCoords","$04f3dddf70873dfc$export$33863bdf254c6c3","vertexes","UVCoordinates","normal","_vertexes","_UVCoordinates","applyMatrixMut","matrix","$e50145874b2b1376$export$30a0ad04fe9506e3","normalizeInScreenSpaceMut","screenWidth","screenHeight","$e50145874b2b1376$export$d0a221040ae28e0d","getVertexCopies","map","vertex","getUVCoordinatesCopies","vec","getNormalCopy","getCopy","value","$e50145874b2b1376$export$fc85d8c44b058d59","vector","Math","sqrt","$e50145874b2b1376$export$d269a5f7e82fc116","$e50145874b2b1376$export$70da8fd9d46ea007","vec1","vec2","$e50145874b2b1376$export$c2244c86a719847d","v0","v1","$e50145874b2b1376$export$dfcaef75cdfc45e9","angleRad","cos","sin","$e50145874b2b1376$export$3dc04abe5d063593","$e50145874b2b1376$export$50406abad8619e0f","$e50145874b2b1376$export$dd797979fd17c2a4","$e50145874b2b1376$export$f1a206b972840bf9","rotation","position","zRotationMatrix","xRotationMatrix","yRotationMatrix","translationMatrix","$e50145874b2b1376$export$64ee27503e96420c","vec3D","m0","m1","c","r","$e50145874b2b1376$export$c1cb189781795ee9","right","up","forward","$e50145874b2b1376$export$aebd08670a3acd15","m","scalar","$e50145874b2b1376$export$982e9c0e8681b1ba","planePoint","planeNormal","lineStart","lineEnd","normalizedPlaneNormal","dPlane","ad","bd","t","lineStartToEnd","lineToIntersect","$e50145874b2b1376$export$98f9da3653dc14e9","$e50145874b2b1376$export$ac65b8ebb19f9a88","triangle","insidePoints","outsidePoints","insideUVCoordinates","outsideUVCoordinates","forEach","index","push","newV1","newV2","newTriangle","newV01","newV02","newTriangle0","newTriangle1","$e50145874b2b1376$export$4211d36b082f0bb2","textureData","width","height","round","data","$3e58c13e710daa6e$export$56b36b3cdc60a1f9","rasterize","projectionMatrix","sWidth","sHeight","context","camera","clippingPlanes","point","viewportHeight","viewportWidth","gameObject","worldMatrix","imageData","createImageData","canvas","meshes","mesh","viewMatrix","clippedTriangles","triangles","reduce","res","translatedTriangle","line1","line2","cameraDotProduct","isNaN","zNear","sort","t0","t1","averageZ0","averageZ1","screenSpaceClippedTriangles","_generateTriangleData","texture","putImageData","_setPixelData","lightPlaceholder","normalizedLightVector","colorCoefficient","max","vertData","b","dy1","dx1","dv1","du1","dw1","dy2","dx2","dv2","du2","dw2","xStep1","xStep2","u1Step","v1Step","u2Step","v2Step","w1Step","w2Step","abs","aX","bX","textureU","textureV","textureW","sU","sV","sW","eU","eV","eW","tStep","j","texturePixelData","$db93735827a9e977$exports","$aa552dc8a9341dec$export$e176487c05830cc5","_triangles","_texture","$8499bc89375b005f$exports","$ef44e3aa01e5a5f6$export$563a914cafbdc389","_rotation","_position","_rotationXMatrix","_newAxisRotationMatrix","_rotationYMatrix","_rotationZMatrix","_rotationMatrix","_createRotationMatrix","rotationMatrix","hasXChanged","hasYChanged","hasZChanged","_updateAxisRotationMatrix","axis","$c5bdc625d24e9eb9$export$434da80b31429dcb","_transform","_meshes","transform","$38986b05f061e550$var$upDirection","$38986b05f061e550$var$defaultCameraOptions","zFar","fov","$38986b05f061e550$export$79f141de891a5fed","options","_forward","_viewportWidth","_viewportHeight","_zFar","_zNear","_fov","viewportAspectRatio","fovRadians","tan","PI","setForwardDirection","lookDirection","localAxis","lookTarget","$deded05a08b16674$var$CANVAS","document","getElementById","$deded05a08b16674$var$CONTEXT","getContext","$deded05a08b16674$var$camera","$deded05a08b16674$var$viewportAspectRatio","$deded05a08b16674$var$fovRadians","$deded05a08b16674$var$zFar","$deded05a08b16674$var$zNear","$deded05a08b16674$var$viewportWidth","$deded05a08b16674$var$viewportHeight","$deded05a08b16674$var$projectionMatrix","aspectRatio","addEventListener","event","vForward","vRight","vUp","$deded05a08b16674$var$prevTime","$deded05a08b16674$var$fpsCounter","_loadTextureData","response","fetch","fileBlob","blob","bitmap","createImageBitmap","offScreenCanvas","createElement","offScreenCanvasContext","drawImage","getImageData","loadFromUrl","split","rawData","current","line","Number","el","then","teapot","testData","update","time","textContent","toFixed","requestAnimationFrame"],"version":3,"file":"index.fb75d90a.js.map"}